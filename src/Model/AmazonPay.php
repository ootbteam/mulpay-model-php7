<?php
/**
 * AmazonPay
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * AmazonPay Class Doc Comment
 *
 * @category Class
 * @description Amazon Pay V2専用パラメーター
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AmazonPay implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AmazonPay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'checkout_session_id' => 'string',
        'note_to_buyer' => 'string',
        'apb_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'checkout_session_id' => null,
        'note_to_buyer' => null,
        'apb_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'checkout_session_id' => false,
        'note_to_buyer' => false,
        'apb_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkout_session_id' => 'checkoutSessionId',
        'note_to_buyer' => 'noteToBuyer',
        'apb_type' => 'apbType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkout_session_id' => 'setCheckoutSessionId',
        'note_to_buyer' => 'setNoteToBuyer',
        'apb_type' => 'setApbType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkout_session_id' => 'getCheckoutSessionId',
        'note_to_buyer' => 'getNoteToBuyer',
        'apb_type' => 'getApbType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('checkout_session_id', $data ?? [], null);
        $this->setIfExists('note_to_buyer', $data ?? [], null);
        $this->setIfExists('apb_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['checkout_session_id']) && (mb_strlen($this->container['checkout_session_id']) > 256)) {
            $invalidProperties[] = "invalid value for 'checkout_session_id', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['note_to_buyer']) && (mb_strlen($this->container['note_to_buyer']) > 255)) {
            $invalidProperties[] = "invalid value for 'note_to_buyer', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['apb_type']) && !preg_match("/^(PayOnly|PayAndShip)$/", $this->container['apb_type'])) {
            $invalidProperties[] = "invalid value for 'apb_type', must be conform to the pattern /^(PayOnly|PayAndShip)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checkout_session_id
     *
     * @return string|null
     */
    public function getCheckoutSessionId()
    {
        return $this->container['checkout_session_id'];
    }

    /**
     * Sets checkout_session_id
     *
     * @param string|null $checkout_session_id チェックアウトセッションID   APBタイプ`apbType`を設定しない場合は必須です。
     *
     * @return self
     */
    public function setCheckoutSessionId($checkout_session_id)
    {
        if (is_null($checkout_session_id)) {
            throw new \InvalidArgumentException('non-nullable checkout_session_id cannot be null');
        }
        if ((mb_strlen($checkout_session_id) > 256)) {
            throw new \InvalidArgumentException('invalid length for $checkout_session_id when calling AmazonPay., must be smaller than or equal to 256.');
        }

        $this->container['checkout_session_id'] = $checkout_session_id;

        return $this;
    }

    /**
     * Gets note_to_buyer
     *
     * @return string|null
     */
    public function getNoteToBuyer()
    {
        return $this->container['note_to_buyer'];
    }

    /**
     * Sets note_to_buyer
     *
     * @param string|null $note_to_buyer 注文の説明   注文の説明です。   Amazonからお客様へのメールに表示されます。
     *
     * @return self
     */
    public function setNoteToBuyer($note_to_buyer)
    {
        if (is_null($note_to_buyer)) {
            throw new \InvalidArgumentException('non-nullable note_to_buyer cannot be null');
        }
        if ((mb_strlen($note_to_buyer) > 255)) {
            throw new \InvalidArgumentException('invalid length for $note_to_buyer when calling AmazonPay., must be smaller than or equal to 255.');
        }

        $this->container['note_to_buyer'] = $note_to_buyer;

        return $this;
    }

    /**
     * Gets apb_type
     *
     * @return string|null
     */
    public function getApbType()
    {
        return $this->container['apb_type'];
    }

    /**
     * Sets apb_type
     *
     * @param string|null $apb_type APBタイプ   [APB(AdditionalPaymentButton)機能](https://www.amazonpay-faq.jp/faq/QA-66)を利用する場合のみ設定してください。    - `PayOnly`: デジタル商品など住所情報を使用しない場合   - `PayAndShip`: 物販など住所情報を使用する場合   `PayAndShip`の場合、以下パラメーターは必須です。   住所の宛名`order.shippingAddress.name`   住所の町域・丁目番地`order.shippingAddress.line1`   住所の市区町村`order.shippingAddress.city`   住所の都道府県番号`order.shippingAddress.state`   住所の郵便番号`order.shippingAddress.postCode`   住所の国番号`order.shippingAddress.country`   電話番号`payer.phones.number`(1件目が使用されます)
     *
     * @return self
     */
    public function setApbType($apb_type)
    {
        if (is_null($apb_type)) {
            throw new \InvalidArgumentException('non-nullable apb_type cannot be null');
        }

        if ((!preg_match("/^(PayOnly|PayAndShip)$/", ObjectSerializer::toString($apb_type)))) {
            throw new \InvalidArgumentException("invalid value for \$apb_type when calling AmazonPay., must conform to the pattern /^(PayOnly|PayAndShip)$/.");
        }

        $this->container['apb_type'] = $apb_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


