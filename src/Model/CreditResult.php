<?php
/**
 * CreditResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * CreditResult Class Doc Comment
 *
 * @category Class
 * @description カード支払い結果情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_type' => 'string',
        'card_result' => '\OotbTeam\MulPay\Model\CardResult',
        'forwarded_acquirer_code' => 'string',
        'approval_code' => 'string',
        'nw_transaction_id' => 'string',
        'transaction_date_time' => '\DateTime',
        'capture_expiry_date_time' => '\DateTime',
        'use_tds2' => 'bool',
        'use_fraud_detection' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_type' => null,
        'card_result' => null,
        'forwarded_acquirer_code' => null,
        'approval_code' => null,
        'nw_transaction_id' => null,
        'transaction_date_time' => 'date-time',
        'capture_expiry_date_time' => 'date-time',
        'use_tds2' => null,
        'use_fraud_detection' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'card_type' => false,
        'card_result' => false,
        'forwarded_acquirer_code' => false,
        'approval_code' => false,
        'nw_transaction_id' => false,
        'transaction_date_time' => false,
        'capture_expiry_date_time' => false,
        'use_tds2' => false,
        'use_fraud_detection' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_type' => 'cardType',
        'card_result' => 'cardResult',
        'forwarded_acquirer_code' => 'forwardedAcquirerCode',
        'approval_code' => 'approvalCode',
        'nw_transaction_id' => 'nwTransactionId',
        'transaction_date_time' => 'transactionDateTime',
        'capture_expiry_date_time' => 'captureExpiryDateTime',
        'use_tds2' => 'useTds2',
        'use_fraud_detection' => 'useFraudDetection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_type' => 'setCardType',
        'card_result' => 'setCardResult',
        'forwarded_acquirer_code' => 'setForwardedAcquirerCode',
        'approval_code' => 'setApprovalCode',
        'nw_transaction_id' => 'setNwTransactionId',
        'transaction_date_time' => 'setTransactionDateTime',
        'capture_expiry_date_time' => 'setCaptureExpiryDateTime',
        'use_tds2' => 'setUseTds2',
        'use_fraud_detection' => 'setUseFraudDetection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_type' => 'getCardType',
        'card_result' => 'getCardResult',
        'forwarded_acquirer_code' => 'getForwardedAcquirerCode',
        'approval_code' => 'getApprovalCode',
        'nw_transaction_id' => 'getNwTransactionId',
        'transaction_date_time' => 'getTransactionDateTime',
        'capture_expiry_date_time' => 'getCaptureExpiryDateTime',
        'use_tds2' => 'getUseTds2',
        'use_fraud_detection' => 'getUseFraudDetection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CARD_TYPE_CREDIT_CARD = 'CREDIT_CARD';
    public const CARD_TYPE_APPLE_PAY = 'APPLE_PAY';
    public const CARD_TYPE_GOOGLE_PAY = 'GOOGLE_PAY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_CREDIT_CARD,
            self::CARD_TYPE_APPLE_PAY,
            self::CARD_TYPE_GOOGLE_PAY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('card_type', $data ?? [], null);
        $this->setIfExists('card_result', $data ?? [], null);
        $this->setIfExists('forwarded_acquirer_code', $data ?? [], null);
        $this->setIfExists('approval_code', $data ?? [], null);
        $this->setIfExists('nw_transaction_id', $data ?? [], null);
        $this->setIfExists('transaction_date_time', $data ?? [], null);
        $this->setIfExists('capture_expiry_date_time', $data ?? [], null);
        $this->setIfExists('use_tds2', $data ?? [], null);
        $this->setIfExists('use_fraud_detection', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'card_type', must be one of '%s'",
                $this->container['card_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_type
     *
     * @return string|null
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string|null $card_type カードのタイプ   - `CREDIT_CARD`：クレジットカード - `APPLE_PAY`：Apple Pay - `GOOGLE_PAY`：Google Pay
     *
     * @return self
     */
    public function setCardType($card_type)
    {
        if (is_null($card_type)) {
            throw new \InvalidArgumentException('non-nullable card_type cannot be null');
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'card_type', must be one of '%s'",
                    $card_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets card_result
     *
     * @return \OotbTeam\MulPay\Model\CardResult|null
     */
    public function getCardResult()
    {
        return $this->container['card_result'];
    }

    /**
     * Sets card_result
     *
     * @param \OotbTeam\MulPay\Model\CardResult|null $card_result card_result
     *
     * @return self
     */
    public function setCardResult($card_result)
    {
        if (is_null($card_result)) {
            throw new \InvalidArgumentException('non-nullable card_result cannot be null');
        }
        $this->container['card_result'] = $card_result;

        return $this;
    }

    /**
     * Gets forwarded_acquirer_code
     *
     * @return string|null
     */
    public function getForwardedAcquirerCode()
    {
        return $this->container['forwarded_acquirer_code'];
    }

    /**
     * Sets forwarded_acquirer_code
     *
     * @param string|null $forwarded_acquirer_code 仕向先カード会社コード   プロトコルタイプ/モジュールタイプにおける`Forward`パラメーターと同じです。   最大7桁の半角英数字・半角スペースで構成されます。
     *
     * @return self
     */
    public function setForwardedAcquirerCode($forwarded_acquirer_code)
    {
        if (is_null($forwarded_acquirer_code)) {
            throw new \InvalidArgumentException('non-nullable forwarded_acquirer_code cannot be null');
        }
        $this->container['forwarded_acquirer_code'] = $forwarded_acquirer_code;

        return $this;
    }

    /**
     * Gets approval_code
     *
     * @return string|null
     */
    public function getApprovalCode()
    {
        return $this->container['approval_code'];
    }

    /**
     * Sets approval_code
     *
     * @param string|null $approval_code カード会社が発行した承認番号   プロトコルタイプ/モジュールタイプにおける`Approve`パラメーターと同じです。   最大7桁の半角英数字・半角スペースで構成されます。   有効性確認やキャンセルの場合には、全て半角スペース、または空になる可能性があります。
     *
     * @return self
     */
    public function setApprovalCode($approval_code)
    {
        if (is_null($approval_code)) {
            throw new \InvalidArgumentException('non-nullable approval_code cannot be null');
        }
        $this->container['approval_code'] = $approval_code;

        return $this;
    }

    /**
     * Gets nw_transaction_id
     *
     * @return string|null
     */
    public function getNwTransactionId()
    {
        return $this->container['nw_transaction_id'];
    }

    /**
     * Sets nw_transaction_id
     *
     * @param string|null $nw_transaction_id クレジットカードネットワーク事業者が取引を特定するためのID   プロトコルタイプ/モジュールタイプにおける`TranID`パラメーターと同じです。   最大28桁の半角数字で構成されます。
     *
     * @return self
     */
    public function setNwTransactionId($nw_transaction_id)
    {
        if (is_null($nw_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable nw_transaction_id cannot be null');
        }
        $this->container['nw_transaction_id'] = $nw_transaction_id;

        return $this;
    }

    /**
     * Gets transaction_date_time
     *
     * @return \DateTime|null
     */
    public function getTransactionDateTime()
    {
        return $this->container['transaction_date_time'];
    }

    /**
     * Sets transaction_date_time
     *
     * @param \DateTime|null $transaction_date_time 処理日時   [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-05-30T12:34:56+09:00
     *
     * @return self
     */
    public function setTransactionDateTime($transaction_date_time)
    {
        if (is_null($transaction_date_time)) {
            throw new \InvalidArgumentException('non-nullable transaction_date_time cannot be null');
        }
        $this->container['transaction_date_time'] = $transaction_date_time;

        return $this;
    }

    /**
     * Gets capture_expiry_date_time
     *
     * @return \DateTime|null
     */
    public function getCaptureExpiryDateTime()
    {
        return $this->container['capture_expiry_date_time'];
    }

    /**
     * Sets capture_expiry_date_time
     *
     * @param \DateTime|null $capture_expiry_date_time 仮売上有効日時   [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-06-30T12:34:56+09:00
     *
     * @return self
     */
    public function setCaptureExpiryDateTime($capture_expiry_date_time)
    {
        if (is_null($capture_expiry_date_time)) {
            throw new \InvalidArgumentException('non-nullable capture_expiry_date_time cannot be null');
        }
        $this->container['capture_expiry_date_time'] = $capture_expiry_date_time;

        return $this;
    }

    /**
     * Gets use_tds2
     *
     * @return bool|null
     */
    public function getUseTds2()
    {
        return $this->container['use_tds2'];
    }

    /**
     * Sets use_tds2
     *
     * @param bool|null $use_tds2 3Dセキュア認証の利用有無   当該取引が3Dセキュア認証済である場合は`true`です。
     *
     * @return self
     */
    public function setUseTds2($use_tds2)
    {
        if (is_null($use_tds2)) {
            throw new \InvalidArgumentException('non-nullable use_tds2 cannot be null');
        }
        $this->container['use_tds2'] = $use_tds2;

        return $this;
    }

    /**
     * Gets use_fraud_detection
     *
     * @return bool|null
     */
    public function getUseFraudDetection()
    {
        return $this->container['use_fraud_detection'];
    }

    /**
     * Sets use_fraud_detection
     *
     * @param bool|null $use_fraud_detection 不正検知の利用有無
     *
     * @return self
     */
    public function setUseFraudDetection($use_fraud_detection)
    {
        if (is_null($use_fraud_detection)) {
            throw new \InvalidArgumentException('non-nullable use_fraud_detection cannot be null');
        }
        $this->container['use_fraud_detection'] = $use_fraud_detection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


