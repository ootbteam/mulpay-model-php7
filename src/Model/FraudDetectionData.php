<?php
/**
 * FraudDetectionData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * FraudDetectionData Class Doc Comment
 *
 * @category Class
 * @description 不正検知データ情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FraudDetectionData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FraudDetectionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_id' => 'string',
        'identity_doc_type' => 'string',
        'identity_doc_id' => 'string',
        'shipping_corporation_name' => 'string',
        'shipping_phone' => 'string',
        'shipping_email' => 'string',
        'shipping_method' => 'string',
        'shipping_amount' => 'string',
        'shipping_tracking_number' => 'string',
        'shipping_comment' => 'string',
        'shipping_salutation' => 'string',
        'device_information' => 'string',
        'repeater' => 'bool',
        'user_registration_elapsed_days' => 'string',
        'promotion_code' => 'string',
        'gift_card_message' => 'string',
        'gift_card_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_id' => null,
        'identity_doc_type' => null,
        'identity_doc_id' => null,
        'shipping_corporation_name' => null,
        'shipping_phone' => null,
        'shipping_email' => 'email',
        'shipping_method' => null,
        'shipping_amount' => null,
        'shipping_tracking_number' => null,
        'shipping_comment' => null,
        'shipping_salutation' => null,
        'device_information' => null,
        'repeater' => null,
        'user_registration_elapsed_days' => null,
        'promotion_code' => null,
        'gift_card_message' => null,
        'gift_card_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_id' => false,
        'identity_doc_type' => false,
        'identity_doc_id' => false,
        'shipping_corporation_name' => false,
        'shipping_phone' => false,
        'shipping_email' => false,
        'shipping_method' => false,
        'shipping_amount' => false,
        'shipping_tracking_number' => false,
        'shipping_comment' => false,
        'shipping_salutation' => false,
        'device_information' => false,
        'repeater' => false,
        'user_registration_elapsed_days' => false,
        'promotion_code' => false,
        'gift_card_message' => false,
        'gift_card_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userId',
        'identity_doc_type' => 'identityDocType',
        'identity_doc_id' => 'identityDocId',
        'shipping_corporation_name' => 'shippingCorporationName',
        'shipping_phone' => 'shippingPhone',
        'shipping_email' => 'shippingEmail',
        'shipping_method' => 'shippingMethod',
        'shipping_amount' => 'shippingAmount',
        'shipping_tracking_number' => 'shippingTrackingNumber',
        'shipping_comment' => 'shippingComment',
        'shipping_salutation' => 'shippingSalutation',
        'device_information' => 'deviceInformation',
        'repeater' => 'repeater',
        'user_registration_elapsed_days' => 'userRegistrationElapsedDays',
        'promotion_code' => 'promotionCode',
        'gift_card_message' => 'giftCardMessage',
        'gift_card_type' => 'giftCardType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'identity_doc_type' => 'setIdentityDocType',
        'identity_doc_id' => 'setIdentityDocId',
        'shipping_corporation_name' => 'setShippingCorporationName',
        'shipping_phone' => 'setShippingPhone',
        'shipping_email' => 'setShippingEmail',
        'shipping_method' => 'setShippingMethod',
        'shipping_amount' => 'setShippingAmount',
        'shipping_tracking_number' => 'setShippingTrackingNumber',
        'shipping_comment' => 'setShippingComment',
        'shipping_salutation' => 'setShippingSalutation',
        'device_information' => 'setDeviceInformation',
        'repeater' => 'setRepeater',
        'user_registration_elapsed_days' => 'setUserRegistrationElapsedDays',
        'promotion_code' => 'setPromotionCode',
        'gift_card_message' => 'setGiftCardMessage',
        'gift_card_type' => 'setGiftCardType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'identity_doc_type' => 'getIdentityDocType',
        'identity_doc_id' => 'getIdentityDocId',
        'shipping_corporation_name' => 'getShippingCorporationName',
        'shipping_phone' => 'getShippingPhone',
        'shipping_email' => 'getShippingEmail',
        'shipping_method' => 'getShippingMethod',
        'shipping_amount' => 'getShippingAmount',
        'shipping_tracking_number' => 'getShippingTrackingNumber',
        'shipping_comment' => 'getShippingComment',
        'shipping_salutation' => 'getShippingSalutation',
        'device_information' => 'getDeviceInformation',
        'repeater' => 'getRepeater',
        'user_registration_elapsed_days' => 'getUserRegistrationElapsedDays',
        'promotion_code' => 'getPromotionCode',
        'gift_card_message' => 'getGiftCardMessage',
        'gift_card_type' => 'getGiftCardType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const IDENTITY_DOC_TYPE_PASSPORT = 'PASSPORT';
    public const IDENTITY_DOC_TYPE_TAXSTATEMENT = 'TAXSTATEMENT';
    public const SHIPPING_METHOD_NEXT_DAY_OVERNIGHT = 'NEXT_DAY_OVERNIGHT';
    public const SHIPPING_METHOD_TWO_DAY_SERVICE = 'TWO_DAY_SERVICE';
    public const SHIPPING_METHOD_THREE_DAY_SERVICE = 'THREE_DAY_SERVICE';
    public const SHIPPING_METHOD_LOWEST_COST = 'LOWEST_COST';
    public const SHIPPING_METHOD_CARRIER_DESIGNATED_BY_CUSTOMER = 'CARRIER_DESIGNATED_BY_CUSTOMER';
    public const SHIPPING_METHOD_ELECTRONIC_DELIVERY = 'ELECTRONIC_DELIVERY';
    public const SHIPPING_METHOD_GROUND = 'GROUND';
    public const SHIPPING_METHOD_INTERNATIONAL = 'INTERNATIONAL';
    public const SHIPPING_METHOD_MILITARY = 'MILITARY';
    public const SHIPPING_METHOD_STORE_PICKUP = 'STORE_PICKUP';
    public const SHIPPING_METHOD_SAME_DAY_SERVICE = 'SAME_DAY_SERVICE';
    public const SHIPPING_METHOD_OTHER = 'OTHER';
    public const SHIPPING_METHOD_PUDO = 'PUDO';
    public const SHIPPING_METHOD_EXPEDITED = 'EXPEDITED';
    public const GIFT_CARD_TYPE_ANNIVERSARY = 'ANNIVERSARY';
    public const GIFT_CARD_TYPE_APRIL_FOOLS_DAY = 'APRIL_FOOLS_DAY';
    public const GIFT_CARD_TYPE_BABY_SHOWER = 'BABY_SHOWER';
    public const GIFT_CARD_TYPE_BIRTHDAY = 'BIRTHDAY';
    public const GIFT_CARD_TYPE_BOSSES_DAY = 'BOSSES_DAY';
    public const GIFT_CARD_TYPE_CELEBRATE_FALL = 'CELEBRATE_FALL';
    public const GIFT_CARD_TYPE_CHINESE_NEW_YEAR = 'CHINESE_NEW_YEAR';
    public const GIFT_CARD_TYPE_CHRISTMAS = 'CHRISTMAS';
    public const GIFT_CARD_TYPE_CONGRATULATIONS = 'CONGRATULATIONS';
    public const GIFT_CARD_TYPE_EASTER = 'EASTER';
    public const GIFT_CARD_TYPE_FATHERS_DAY = 'FATHERS_DAY';
    public const GIFT_CARD_TYPE_GRADUATION = 'GRADUATION';
    public const GIFT_CARD_TYPE_GRANDPARENTS_DAY = 'GRANDPARENTS_DAY';
    public const GIFT_CARD_TYPE_HALLOWEEN = 'HALLOWEEN';
    public const GIFT_CARD_TYPE_HANUKKAH = 'HANUKKAH';
    public const GIFT_CARD_TYPE_HOLIDAY = 'HOLIDAY';
    public const GIFT_CARD_TYPE_INDEPENDENCE_DAY = 'INDEPENDENCE_DAY';
    public const GIFT_CARD_TYPE_KWANZAA = 'KWANZAA';
    public const GIFT_CARD_TYPE_MOTHERS_DAY = 'MOTHERS_DAY';
    public const GIFT_CARD_TYPE_NEW_YEARS_DAY = 'NEW_YEARS_DAY';
    public const GIFT_CARD_TYPE_OTHER = 'OTHER';
    public const GIFT_CARD_TYPE_PASSOVER = 'PASSOVER';
    public const GIFT_CARD_TYPE_SEASONS_GREETINGS = 'SEASONS_GREETINGS';
    public const GIFT_CARD_TYPE_SECRETARYS_DAY = 'SECRETARYS_DAY';
    public const GIFT_CARD_TYPE_ST_PATRICKS_DAY = 'ST_PATRICKS_DAY';
    public const GIFT_CARD_TYPE_SWEETEST_DAY = 'SWEETEST_DAY';
    public const GIFT_CARD_TYPE_THANKSGIVING = 'THANKSGIVING';
    public const GIFT_CARD_TYPE_VALENTINES_DAY = 'VALENTINES_DAY';
    public const GIFT_CARD_TYPE_WEDDING = 'WEDDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdentityDocTypeAllowableValues()
    {
        return [
            self::IDENTITY_DOC_TYPE_PASSPORT,
            self::IDENTITY_DOC_TYPE_TAXSTATEMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingMethodAllowableValues()
    {
        return [
            self::SHIPPING_METHOD_NEXT_DAY_OVERNIGHT,
            self::SHIPPING_METHOD_TWO_DAY_SERVICE,
            self::SHIPPING_METHOD_THREE_DAY_SERVICE,
            self::SHIPPING_METHOD_LOWEST_COST,
            self::SHIPPING_METHOD_CARRIER_DESIGNATED_BY_CUSTOMER,
            self::SHIPPING_METHOD_ELECTRONIC_DELIVERY,
            self::SHIPPING_METHOD_GROUND,
            self::SHIPPING_METHOD_INTERNATIONAL,
            self::SHIPPING_METHOD_MILITARY,
            self::SHIPPING_METHOD_STORE_PICKUP,
            self::SHIPPING_METHOD_SAME_DAY_SERVICE,
            self::SHIPPING_METHOD_OTHER,
            self::SHIPPING_METHOD_PUDO,
            self::SHIPPING_METHOD_EXPEDITED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGiftCardTypeAllowableValues()
    {
        return [
            self::GIFT_CARD_TYPE_ANNIVERSARY,
            self::GIFT_CARD_TYPE_APRIL_FOOLS_DAY,
            self::GIFT_CARD_TYPE_BABY_SHOWER,
            self::GIFT_CARD_TYPE_BIRTHDAY,
            self::GIFT_CARD_TYPE_BOSSES_DAY,
            self::GIFT_CARD_TYPE_CELEBRATE_FALL,
            self::GIFT_CARD_TYPE_CHINESE_NEW_YEAR,
            self::GIFT_CARD_TYPE_CHRISTMAS,
            self::GIFT_CARD_TYPE_CONGRATULATIONS,
            self::GIFT_CARD_TYPE_EASTER,
            self::GIFT_CARD_TYPE_FATHERS_DAY,
            self::GIFT_CARD_TYPE_GRADUATION,
            self::GIFT_CARD_TYPE_GRANDPARENTS_DAY,
            self::GIFT_CARD_TYPE_HALLOWEEN,
            self::GIFT_CARD_TYPE_HANUKKAH,
            self::GIFT_CARD_TYPE_HOLIDAY,
            self::GIFT_CARD_TYPE_INDEPENDENCE_DAY,
            self::GIFT_CARD_TYPE_KWANZAA,
            self::GIFT_CARD_TYPE_MOTHERS_DAY,
            self::GIFT_CARD_TYPE_NEW_YEARS_DAY,
            self::GIFT_CARD_TYPE_OTHER,
            self::GIFT_CARD_TYPE_PASSOVER,
            self::GIFT_CARD_TYPE_SEASONS_GREETINGS,
            self::GIFT_CARD_TYPE_SECRETARYS_DAY,
            self::GIFT_CARD_TYPE_ST_PATRICKS_DAY,
            self::GIFT_CARD_TYPE_SWEETEST_DAY,
            self::GIFT_CARD_TYPE_THANKSGIVING,
            self::GIFT_CARD_TYPE_VALENTINES_DAY,
            self::GIFT_CARD_TYPE_WEDDING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('identity_doc_type', $data ?? [], null);
        $this->setIfExists('identity_doc_id', $data ?? [], null);
        $this->setIfExists('shipping_corporation_name', $data ?? [], null);
        $this->setIfExists('shipping_phone', $data ?? [], null);
        $this->setIfExists('shipping_email', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('shipping_amount', $data ?? [], null);
        $this->setIfExists('shipping_tracking_number', $data ?? [], null);
        $this->setIfExists('shipping_comment', $data ?? [], null);
        $this->setIfExists('shipping_salutation', $data ?? [], null);
        $this->setIfExists('device_information', $data ?? [], null);
        $this->setIfExists('repeater', $data ?? [], false);
        $this->setIfExists('user_registration_elapsed_days', $data ?? [], null);
        $this->setIfExists('promotion_code', $data ?? [], null);
        $this->setIfExists('gift_card_message', $data ?? [], null);
        $this->setIfExists('gift_card_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ((mb_strlen($this->container['user_id']) > 60)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be smaller than or equal to 60.";
        }

        if (!preg_match("/^[a-zA-Z0-9-@_ . ]+$/", $this->container['user_id'])) {
            $invalidProperties[] = "invalid value for 'user_id', must be conform to the pattern /^[a-zA-Z0-9-@_ . ]+$/.";
        }

        $allowedValues = $this->getIdentityDocTypeAllowableValues();
        if (!is_null($this->container['identity_doc_type']) && !in_array($this->container['identity_doc_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'identity_doc_type', must be one of '%s'",
                $this->container['identity_doc_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['identity_doc_id']) && (mb_strlen($this->container['identity_doc_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'identity_doc_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['identity_doc_id']) && !preg_match("/^[0-9a-zA-Z-]+$/", $this->container['identity_doc_id'])) {
            $invalidProperties[] = "invalid value for 'identity_doc_id', must be conform to the pattern /^[0-9a-zA-Z-]+$/.";
        }

        if (!is_null($this->container['shipping_corporation_name']) && (mb_strlen($this->container['shipping_corporation_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'shipping_corporation_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['shipping_phone']) && (mb_strlen($this->container['shipping_phone']) > 13)) {
            $invalidProperties[] = "invalid value for 'shipping_phone', the character length must be smaller than or equal to 13.";
        }

        if (!is_null($this->container['shipping_phone']) && !preg_match("/^[0-9-]+$/", $this->container['shipping_phone'])) {
            $invalidProperties[] = "invalid value for 'shipping_phone', must be conform to the pattern /^[0-9-]+$/.";
        }

        if (!is_null($this->container['shipping_email']) && (mb_strlen($this->container['shipping_email']) > 254)) {
            $invalidProperties[] = "invalid value for 'shipping_email', the character length must be smaller than or equal to 254.";
        }

        $allowedValues = $this->getShippingMethodAllowableValues();
        if (!is_null($this->container['shipping_method']) && !in_array($this->container['shipping_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_method', must be one of '%s'",
                $this->container['shipping_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['shipping_amount']) && (mb_strlen($this->container['shipping_amount']) > 15)) {
            $invalidProperties[] = "invalid value for 'shipping_amount', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['shipping_amount']) && !preg_match("/^[0-9]+$/", $this->container['shipping_amount'])) {
            $invalidProperties[] = "invalid value for 'shipping_amount', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['shipping_tracking_number']) && (mb_strlen($this->container['shipping_tracking_number']) > 19)) {
            $invalidProperties[] = "invalid value for 'shipping_tracking_number', the character length must be smaller than or equal to 19.";
        }

        if (!is_null($this->container['shipping_tracking_number']) && !preg_match("/^[0-9a-zA-Z-]+$/", $this->container['shipping_tracking_number'])) {
            $invalidProperties[] = "invalid value for 'shipping_tracking_number', must be conform to the pattern /^[0-9a-zA-Z-]+$/.";
        }

        if (!is_null($this->container['shipping_comment']) && (mb_strlen($this->container['shipping_comment']) > 160)) {
            $invalidProperties[] = "invalid value for 'shipping_comment', the character length must be smaller than or equal to 160.";
        }

        if (!is_null($this->container['shipping_salutation']) && (mb_strlen($this->container['shipping_salutation']) > 5)) {
            $invalidProperties[] = "invalid value for 'shipping_salutation', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['shipping_salutation']) && !preg_match("/^[ -~｡-ﾟ]+$/", $this->container['shipping_salutation'])) {
            $invalidProperties[] = "invalid value for 'shipping_salutation', must be conform to the pattern /^[ -~｡-ﾟ]+$/.";
        }

        if (!is_null($this->container['device_information']) && (mb_strlen($this->container['device_information']) > 65535)) {
            $invalidProperties[] = "invalid value for 'device_information', the character length must be smaller than or equal to 65535.";
        }

        if (!is_null($this->container['device_information']) && !preg_match("/^[ -~]+$/", $this->container['device_information'])) {
            $invalidProperties[] = "invalid value for 'device_information', must be conform to the pattern /^[ -~]+$/.";
        }

        if (!is_null($this->container['user_registration_elapsed_days']) && (mb_strlen($this->container['user_registration_elapsed_days']) > 7)) {
            $invalidProperties[] = "invalid value for 'user_registration_elapsed_days', the character length must be smaller than or equal to 7.";
        }

        if (!is_null($this->container['user_registration_elapsed_days']) && !preg_match("/^[0-9]+$/", $this->container['user_registration_elapsed_days'])) {
            $invalidProperties[] = "invalid value for 'user_registration_elapsed_days', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['promotion_code']) && (mb_strlen($this->container['promotion_code']) > 36)) {
            $invalidProperties[] = "invalid value for 'promotion_code', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['promotion_code']) && !preg_match("/^[0-9a-zA-Z-]+$/", $this->container['promotion_code'])) {
            $invalidProperties[] = "invalid value for 'promotion_code', must be conform to the pattern /^[0-9a-zA-Z-]+$/.";
        }

        if (!is_null($this->container['gift_card_message']) && (mb_strlen($this->container['gift_card_message']) > 160)) {
            $invalidProperties[] = "invalid value for 'gift_card_message', the character length must be smaller than or equal to 160.";
        }

        $allowedValues = $this->getGiftCardTypeAllowableValues();
        if (!is_null($this->container['gift_card_type']) && !in_array($this->container['gift_card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gift_card_type', must be one of '%s'",
                $this->container['gift_card_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id ユーザーID
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        if ((mb_strlen($user_id) > 60)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling FraudDetectionData., must be smaller than or equal to 60.');
        }
        if ((!preg_match("/^[a-zA-Z0-9-@_ . ]+$/", ObjectSerializer::toString($user_id)))) {
            throw new \InvalidArgumentException("invalid value for \$user_id when calling FraudDetectionData., must conform to the pattern /^[a-zA-Z0-9-@_ . ]+$/.");
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets identity_doc_type
     *
     * @return string|null
     */
    public function getIdentityDocType()
    {
        return $this->container['identity_doc_type'];
    }

    /**
     * Sets identity_doc_type
     *
     * @param string|null $identity_doc_type 本人確認書類タイプ   本人確認書類IDに設定する書類タイプを設定します。   本人確認書類IDを設定する場合は省略できません。 - `PASSPORT`：パスポート - `TAXSTATEMENT`：納税証明書
     *
     * @return self
     */
    public function setIdentityDocType($identity_doc_type)
    {
        if (is_null($identity_doc_type)) {
            throw new \InvalidArgumentException('non-nullable identity_doc_type cannot be null');
        }
        $allowedValues = $this->getIdentityDocTypeAllowableValues();
        if (!in_array($identity_doc_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'identity_doc_type', must be one of '%s'",
                    $identity_doc_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['identity_doc_type'] = $identity_doc_type;

        return $this;
    }

    /**
     * Gets identity_doc_id
     *
     * @return string|null
     */
    public function getIdentityDocId()
    {
        return $this->container['identity_doc_id'];
    }

    /**
     * Sets identity_doc_id
     *
     * @param string|null $identity_doc_id 本人確認書類ID   設定する場合は本人確認書類タイプも設定する必要があります。
     *
     * @return self
     */
    public function setIdentityDocId($identity_doc_id)
    {
        if (is_null($identity_doc_id)) {
            throw new \InvalidArgumentException('non-nullable identity_doc_id cannot be null');
        }
        if ((mb_strlen($identity_doc_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $identity_doc_id when calling FraudDetectionData., must be smaller than or equal to 20.');
        }
        if ((!preg_match("/^[0-9a-zA-Z-]+$/", ObjectSerializer::toString($identity_doc_id)))) {
            throw new \InvalidArgumentException("invalid value for \$identity_doc_id when calling FraudDetectionData., must conform to the pattern /^[0-9a-zA-Z-]+$/.");
        }

        $this->container['identity_doc_id'] = $identity_doc_id;

        return $this;
    }

    /**
     * Gets shipping_corporation_name
     *
     * @return string|null
     */
    public function getShippingCorporationName()
    {
        return $this->container['shipping_corporation_name'];
    }

    /**
     * Sets shipping_corporation_name
     *
     * @param string|null $shipping_corporation_name 配送先会社名
     *
     * @return self
     */
    public function setShippingCorporationName($shipping_corporation_name)
    {
        if (is_null($shipping_corporation_name)) {
            throw new \InvalidArgumentException('non-nullable shipping_corporation_name cannot be null');
        }
        if ((mb_strlen($shipping_corporation_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $shipping_corporation_name when calling FraudDetectionData., must be smaller than or equal to 60.');
        }

        $this->container['shipping_corporation_name'] = $shipping_corporation_name;

        return $this;
    }

    /**
     * Gets shipping_phone
     *
     * @return string|null
     */
    public function getShippingPhone()
    {
        return $this->container['shipping_phone'];
    }

    /**
     * Sets shipping_phone
     *
     * @param string|null $shipping_phone 配送先電話番号
     *
     * @return self
     */
    public function setShippingPhone($shipping_phone)
    {
        if (is_null($shipping_phone)) {
            throw new \InvalidArgumentException('non-nullable shipping_phone cannot be null');
        }
        if ((mb_strlen($shipping_phone) > 13)) {
            throw new \InvalidArgumentException('invalid length for $shipping_phone when calling FraudDetectionData., must be smaller than or equal to 13.');
        }
        if ((!preg_match("/^[0-9-]+$/", ObjectSerializer::toString($shipping_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_phone when calling FraudDetectionData., must conform to the pattern /^[0-9-]+$/.");
        }

        $this->container['shipping_phone'] = $shipping_phone;

        return $this;
    }

    /**
     * Gets shipping_email
     *
     * @return string|null
     */
    public function getShippingEmail()
    {
        return $this->container['shipping_email'];
    }

    /**
     * Sets shipping_email
     *
     * @param string|null $shipping_email 配送先メールアドレス
     *
     * @return self
     */
    public function setShippingEmail($shipping_email)
    {
        if (is_null($shipping_email)) {
            throw new \InvalidArgumentException('non-nullable shipping_email cannot be null');
        }
        if ((mb_strlen($shipping_email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $shipping_email when calling FraudDetectionData., must be smaller than or equal to 254.');
        }

        $this->container['shipping_email'] = $shipping_email;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method 配送方法 - `NEXT_DAY_OVERNIGHT`: 翌日発送 - `TWO_DAY_SERVICE`: 2日以内発送 - `THREE_DAY_SERVICE`: 3日以内発送 - `LOWEST_COST`: 最安値の配送方法 - `CARRIER_DESIGNATED_BY_CUSTOMER`:  お客様指定の運送会社 - `ELECTRONIC_DELIVERY`: 電子郵便 - `GROUND`: 陸上輸送 - `INTERNATIONAL`: 国際郵便 - `MILITARY`: 軍事郵便 - `STORE_PICKUP`: 店舗受け取り - `SAME_DAY_SERVICE`: 即日配送 - `OTHER`: その他 - `PUDO`: PUDOステーション - `EXPEDITED`: 速達郵便
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {
        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }
        $allowedValues = $this->getShippingMethodAllowableValues();
        if (!in_array($shipping_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_method', must be one of '%s'",
                    $shipping_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_amount
     *
     * @return string|null
     */
    public function getShippingAmount()
    {
        return $this->container['shipping_amount'];
    }

    /**
     * Sets shipping_amount
     *
     * @param string|null $shipping_amount 送料   審査タイプ(screeningType)が`RED_SHIELD`の場合、12桁以下で設定してください。
     *
     * @return self
     */
    public function setShippingAmount($shipping_amount)
    {
        if (is_null($shipping_amount)) {
            throw new \InvalidArgumentException('non-nullable shipping_amount cannot be null');
        }
        if ((mb_strlen($shipping_amount) > 15)) {
            throw new \InvalidArgumentException('invalid length for $shipping_amount when calling FraudDetectionData., must be smaller than or equal to 15.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($shipping_amount)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_amount when calling FraudDetectionData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['shipping_amount'] = $shipping_amount;

        return $this;
    }

    /**
     * Gets shipping_tracking_number
     *
     * @return string|null
     */
    public function getShippingTrackingNumber()
    {
        return $this->container['shipping_tracking_number'];
    }

    /**
     * Sets shipping_tracking_number
     *
     * @param string|null $shipping_tracking_number トラッキング番号
     *
     * @return self
     */
    public function setShippingTrackingNumber($shipping_tracking_number)
    {
        if (is_null($shipping_tracking_number)) {
            throw new \InvalidArgumentException('non-nullable shipping_tracking_number cannot be null');
        }
        if ((mb_strlen($shipping_tracking_number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $shipping_tracking_number when calling FraudDetectionData., must be smaller than or equal to 19.');
        }
        if ((!preg_match("/^[0-9a-zA-Z-]+$/", ObjectSerializer::toString($shipping_tracking_number)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_tracking_number when calling FraudDetectionData., must conform to the pattern /^[0-9a-zA-Z-]+$/.");
        }

        $this->container['shipping_tracking_number'] = $shipping_tracking_number;

        return $this;
    }

    /**
     * Gets shipping_comment
     *
     * @return string|null
     */
    public function getShippingComment()
    {
        return $this->container['shipping_comment'];
    }

    /**
     * Sets shipping_comment
     *
     * @param string|null $shipping_comment 発送時コメント
     *
     * @return self
     */
    public function setShippingComment($shipping_comment)
    {
        if (is_null($shipping_comment)) {
            throw new \InvalidArgumentException('non-nullable shipping_comment cannot be null');
        }
        if ((mb_strlen($shipping_comment) > 160)) {
            throw new \InvalidArgumentException('invalid length for $shipping_comment when calling FraudDetectionData., must be smaller than or equal to 160.');
        }

        $this->container['shipping_comment'] = $shipping_comment;

        return $this;
    }

    /**
     * Gets shipping_salutation
     *
     * @return string|null
     */
    public function getShippingSalutation()
    {
        return $this->container['shipping_salutation'];
    }

    /**
     * Sets shipping_salutation
     *
     * @param string|null $shipping_salutation 配送先敬称
     *
     * @return self
     */
    public function setShippingSalutation($shipping_salutation)
    {
        if (is_null($shipping_salutation)) {
            throw new \InvalidArgumentException('non-nullable shipping_salutation cannot be null');
        }
        if ((mb_strlen($shipping_salutation) > 5)) {
            throw new \InvalidArgumentException('invalid length for $shipping_salutation when calling FraudDetectionData., must be smaller than or equal to 5.');
        }
        if ((!preg_match("/^[ -~｡-ﾟ]+$/", ObjectSerializer::toString($shipping_salutation)))) {
            throw new \InvalidArgumentException("invalid value for \$shipping_salutation when calling FraudDetectionData., must conform to the pattern /^[ -~｡-ﾟ]+$/.");
        }

        $this->container['shipping_salutation'] = $shipping_salutation;

        return $this;
    }

    /**
     * Gets device_information
     *
     * @return string|null
     */
    public function getDeviceInformation()
    {
        return $this->container['device_information'];
    }

    /**
     * Sets device_information
     *
     * @param string|null $device_information デバイス情報
     *
     * @return self
     */
    public function setDeviceInformation($device_information)
    {
        if (is_null($device_information)) {
            throw new \InvalidArgumentException('non-nullable device_information cannot be null');
        }
        if ((mb_strlen($device_information) > 65535)) {
            throw new \InvalidArgumentException('invalid length for $device_information when calling FraudDetectionData., must be smaller than or equal to 65535.');
        }
        if ((!preg_match("/^[ -~]+$/", ObjectSerializer::toString($device_information)))) {
            throw new \InvalidArgumentException("invalid value for \$device_information when calling FraudDetectionData., must conform to the pattern /^[ -~]+$/.");
        }

        $this->container['device_information'] = $device_information;

        return $this;
    }

    /**
     * Gets repeater
     *
     * @return bool|null
     */
    public function getRepeater()
    {
        return $this->container['repeater'];
    }

    /**
     * Sets repeater
     *
     * @param bool|null $repeater リピータフラグ
     *
     * @return self
     */
    public function setRepeater($repeater)
    {
        if (is_null($repeater)) {
            throw new \InvalidArgumentException('non-nullable repeater cannot be null');
        }
        $this->container['repeater'] = $repeater;

        return $this;
    }

    /**
     * Gets user_registration_elapsed_days
     *
     * @return string|null
     */
    public function getUserRegistrationElapsedDays()
    {
        return $this->container['user_registration_elapsed_days'];
    }

    /**
     * Sets user_registration_elapsed_days
     *
     * @param string|null $user_registration_elapsed_days ユーザーID登録後経過日数
     *
     * @return self
     */
    public function setUserRegistrationElapsedDays($user_registration_elapsed_days)
    {
        if (is_null($user_registration_elapsed_days)) {
            throw new \InvalidArgumentException('non-nullable user_registration_elapsed_days cannot be null');
        }
        if ((mb_strlen($user_registration_elapsed_days) > 7)) {
            throw new \InvalidArgumentException('invalid length for $user_registration_elapsed_days when calling FraudDetectionData., must be smaller than or equal to 7.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($user_registration_elapsed_days)))) {
            throw new \InvalidArgumentException("invalid value for \$user_registration_elapsed_days when calling FraudDetectionData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['user_registration_elapsed_days'] = $user_registration_elapsed_days;

        return $this;
    }

    /**
     * Gets promotion_code
     *
     * @return string|null
     */
    public function getPromotionCode()
    {
        return $this->container['promotion_code'];
    }

    /**
     * Sets promotion_code
     *
     * @param string|null $promotion_code プロモーションコード
     *
     * @return self
     */
    public function setPromotionCode($promotion_code)
    {
        if (is_null($promotion_code)) {
            throw new \InvalidArgumentException('non-nullable promotion_code cannot be null');
        }
        if ((mb_strlen($promotion_code) > 36)) {
            throw new \InvalidArgumentException('invalid length for $promotion_code when calling FraudDetectionData., must be smaller than or equal to 36.');
        }
        if ((!preg_match("/^[0-9a-zA-Z-]+$/", ObjectSerializer::toString($promotion_code)))) {
            throw new \InvalidArgumentException("invalid value for \$promotion_code when calling FraudDetectionData., must conform to the pattern /^[0-9a-zA-Z-]+$/.");
        }

        $this->container['promotion_code'] = $promotion_code;

        return $this;
    }

    /**
     * Gets gift_card_message
     *
     * @return string|null
     */
    public function getGiftCardMessage()
    {
        return $this->container['gift_card_message'];
    }

    /**
     * Sets gift_card_message
     *
     * @param string|null $gift_card_message ギフトカードメッセージ
     *
     * @return self
     */
    public function setGiftCardMessage($gift_card_message)
    {
        if (is_null($gift_card_message)) {
            throw new \InvalidArgumentException('non-nullable gift_card_message cannot be null');
        }
        if ((mb_strlen($gift_card_message) > 160)) {
            throw new \InvalidArgumentException('invalid length for $gift_card_message when calling FraudDetectionData., must be smaller than or equal to 160.');
        }

        $this->container['gift_card_message'] = $gift_card_message;

        return $this;
    }

    /**
     * Gets gift_card_type
     *
     * @return string|null
     */
    public function getGiftCardType()
    {
        return $this->container['gift_card_type'];
    }

    /**
     * Sets gift_card_type
     *
     * @param string|null $gift_card_type ギフトカードタイプ   - `ANNIVERSARY`: 記念日 - `APRIL_FOOLS_DAY`: エイプリルフール - `BABY_SHOWER`: ベビーシャワー - `BIRTHDAY`: 誕生日 - `BOSSES_DAY`: ボスの日 - `CELEBRATE_FALL`: セレブレイト・フォール - `CHINESE_NEW_YEAR`: 春節 - `CHRISTMAS`: クリスマス - `CONGRATULATIONS`: お祝い - `EASTER`: イースター - `FATHERS_DAY`: 父の日 - `GRADUATION`: 卒業 - `GRANDPARENTS_DAY`: 祖父母の日 - `HALLOWEEN`: ハロウィン - `HANUKKAH`: ハヌカー - `HOLIDAY`: 祝日 - `INDEPENDENCE_DAY`: 独立記念日 - `KWANZAA`: クワンザ - `MOTHERS_DAY`: 母の日 - `NEW_YEARS_DAY`: 元日 - `OTHER`: その他 - `PASSOVER`: 過越 - `SEASONS_GREETINGS`: 季節の挨拶 - `SECRETARYS_DAY`: 秘書の日 - `ST_PATRICKS_DAY`: 聖パトリックの祝日 - `SWEETEST_DAY`: スウィーテスト・デー - `THANKSGIVING`: 感謝祭 - `VALENTINES_DAY`:バレンタインデー  - `WEDDING`: 結婚式
     *
     * @return self
     */
    public function setGiftCardType($gift_card_type)
    {
        if (is_null($gift_card_type)) {
            throw new \InvalidArgumentException('non-nullable gift_card_type cannot be null');
        }
        $allowedValues = $this->getGiftCardTypeAllowableValues();
        if (!in_array($gift_card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gift_card_type', must be one of '%s'",
                    $gift_card_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gift_card_type'] = $gift_card_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


