<?php
/**
 * Merchant
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * Merchant Class Doc Comment
 *
 * @category Class
 * @description 加盟店(ショップ)情報   決済手段ごとの設定要否や各パラメーターの用途は、詳細は[共通パラメーター対応表](#tag/common-parameters)を参照ください。
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Merchant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'name_kana' => 'string',
        'name_alphabet' => 'string',
        'name_short' => 'string',
        'contact_name' => 'string',
        'contact_email' => 'string',
        'contact_url' => 'string',
        'contact_phone' => 'string',
        'contact_opening_hours' => 'string',
        'callback_url' => 'string',
        'webhook_url' => 'string',
        'csrf_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'name_kana' => null,
        'name_alphabet' => null,
        'name_short' => null,
        'contact_name' => null,
        'contact_email' => 'email',
        'contact_url' => 'uri',
        'contact_phone' => null,
        'contact_opening_hours' => null,
        'callback_url' => 'uri',
        'webhook_url' => 'uri',
        'csrf_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'name_kana' => false,
        'name_alphabet' => false,
        'name_short' => false,
        'contact_name' => false,
        'contact_email' => false,
        'contact_url' => false,
        'contact_phone' => false,
        'contact_opening_hours' => false,
        'callback_url' => false,
        'webhook_url' => false,
        'csrf_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'name_kana' => 'nameKana',
        'name_alphabet' => 'nameAlphabet',
        'name_short' => 'nameShort',
        'contact_name' => 'contactName',
        'contact_email' => 'contactEmail',
        'contact_url' => 'contactUrl',
        'contact_phone' => 'contactPhone',
        'contact_opening_hours' => 'contactOpeningHours',
        'callback_url' => 'callbackUrl',
        'webhook_url' => 'webhookUrl',
        'csrf_token' => 'csrfToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'name_kana' => 'setNameKana',
        'name_alphabet' => 'setNameAlphabet',
        'name_short' => 'setNameShort',
        'contact_name' => 'setContactName',
        'contact_email' => 'setContactEmail',
        'contact_url' => 'setContactUrl',
        'contact_phone' => 'setContactPhone',
        'contact_opening_hours' => 'setContactOpeningHours',
        'callback_url' => 'setCallbackUrl',
        'webhook_url' => 'setWebhookUrl',
        'csrf_token' => 'setCsrfToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'name_kana' => 'getNameKana',
        'name_alphabet' => 'getNameAlphabet',
        'name_short' => 'getNameShort',
        'contact_name' => 'getContactName',
        'contact_email' => 'getContactEmail',
        'contact_url' => 'getContactUrl',
        'contact_phone' => 'getContactPhone',
        'contact_opening_hours' => 'getContactOpeningHours',
        'callback_url' => 'getCallbackUrl',
        'webhook_url' => 'getWebhookUrl',
        'csrf_token' => 'getCsrfToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_kana', $data ?? [], null);
        $this->setIfExists('name_alphabet', $data ?? [], null);
        $this->setIfExists('name_short', $data ?? [], null);
        $this->setIfExists('contact_name', $data ?? [], null);
        $this->setIfExists('contact_email', $data ?? [], null);
        $this->setIfExists('contact_url', $data ?? [], null);
        $this->setIfExists('contact_phone', $data ?? [], null);
        $this->setIfExists('contact_opening_hours', $data ?? [], null);
        $this->setIfExists('callback_url', $data ?? [], null);
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('csrf_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 30)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['name_kana'] === null) {
            $invalidProperties[] = "'name_kana' can't be null";
        }
        if (!preg_match("/^[ァ-ヶー　]+$/", $this->container['name_kana'])) {
            $invalidProperties[] = "invalid value for 'name_kana', must be conform to the pattern /^[ァ-ヶー　]+$/.";
        }

        if ($this->container['name_alphabet'] === null) {
            $invalidProperties[] = "'name_alphabet' can't be null";
        }
        if ((mb_strlen($this->container['name_alphabet']) > 25)) {
            $invalidProperties[] = "invalid value for 'name_alphabet', the character length must be smaller than or equal to 25.";
        }

        if (!preg_match("/^[a-zA-Z0-9 \\x2c-\\x2f]+$/", $this->container['name_alphabet'])) {
            $invalidProperties[] = "invalid value for 'name_alphabet', must be conform to the pattern /^[a-zA-Z0-9 \\x2c-\\x2f]+$/.";
        }

        if ($this->container['name_short'] === null) {
            $invalidProperties[] = "'name_short' can't be null";
        }
        if ((mb_strlen($this->container['name_short']) > 30)) {
            $invalidProperties[] = "invalid value for 'name_short', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['contact_name'] === null) {
            $invalidProperties[] = "'contact_name' can't be null";
        }
        if ((mb_strlen($this->container['contact_name']) > 42)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 42.";
        }

        if ($this->container['contact_email'] === null) {
            $invalidProperties[] = "'contact_email' can't be null";
        }
        if ((mb_strlen($this->container['contact_email']) > 254)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['contact_url']) && (mb_strlen($this->container['contact_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'contact_url', the character length must be smaller than or equal to 256.";
        }

        if ($this->container['contact_phone'] === null) {
            $invalidProperties[] = "'contact_phone' can't be null";
        }
        if ((mb_strlen($this->container['contact_phone']) > 13)) {
            $invalidProperties[] = "invalid value for 'contact_phone', the character length must be smaller than or equal to 13.";
        }

        if (!preg_match("/^[0-9-]+$/", $this->container['contact_phone'])) {
            $invalidProperties[] = "invalid value for 'contact_phone', must be conform to the pattern /^[0-9-]+$/.";
        }

        if ($this->container['contact_opening_hours'] === null) {
            $invalidProperties[] = "'contact_opening_hours' can't be null";
        }
        if ((mb_strlen($this->container['contact_opening_hours']) > 11)) {
            $invalidProperties[] = "invalid value for 'contact_opening_hours', the character length must be smaller than or equal to 11.";
        }

        if (!preg_match("/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/", $this->container['contact_opening_hours'])) {
            $invalidProperties[] = "invalid value for 'contact_opening_hours', must be conform to the pattern /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.";
        }

        if (!is_null($this->container['callback_url']) && (mb_strlen($this->container['callback_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'callback_url', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['webhook_url']) && (mb_strlen($this->container['webhook_url']) > 256)) {
            $invalidProperties[] = "invalid value for 'webhook_url', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['csrf_token']) && (mb_strlen($this->container['csrf_token']) > 36)) {
            $invalidProperties[] = "invalid value for 'csrf_token', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['csrf_token']) && !preg_match("/^[-0-9a-zA-Z\\-]+$/", $this->container['csrf_token'])) {
            $invalidProperties[] = "invalid value for 'csrf_token', must be conform to the pattern /^[-0-9a-zA-Z\\-]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 表示用の加盟店様名   設定できる最大長はUTF-8で45byteです。
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Merchant., must be smaller than or equal to 30.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_kana
     *
     * @return string
     */
    public function getNameKana()
    {
        return $this->container['name_kana'];
    }

    /**
     * Sets name_kana
     *
     * @param string $name_kana 表示用の加盟店様名(全角カナのみ)   設定できる最大長はUTF-8で60byteです。
     *
     * @return self
     */
    public function setNameKana($name_kana)
    {
        if (is_null($name_kana)) {
            throw new \InvalidArgumentException('non-nullable name_kana cannot be null');
        }

        if ((!preg_match("/^[ァ-ヶー　]+$/", ObjectSerializer::toString($name_kana)))) {
            throw new \InvalidArgumentException("invalid value for \$name_kana when calling Merchant., must conform to the pattern /^[ァ-ヶー　]+$/.");
        }

        $this->container['name_kana'] = $name_kana;

        return $this;
    }

    /**
     * Gets name_alphabet
     *
     * @return string
     */
    public function getNameAlphabet()
    {
        return $this->container['name_alphabet'];
    }

    /**
     * Sets name_alphabet
     *
     * @param string $name_alphabet 表示用の加盟店様名(英名)
     *
     * @return self
     */
    public function setNameAlphabet($name_alphabet)
    {
        if (is_null($name_alphabet)) {
            throw new \InvalidArgumentException('non-nullable name_alphabet cannot be null');
        }
        if ((mb_strlen($name_alphabet) > 25)) {
            throw new \InvalidArgumentException('invalid length for $name_alphabet when calling Merchant., must be smaller than or equal to 25.');
        }
        if ((!preg_match("/^[a-zA-Z0-9 \\x2c-\\x2f]+$/", ObjectSerializer::toString($name_alphabet)))) {
            throw new \InvalidArgumentException("invalid value for \$name_alphabet when calling Merchant., must conform to the pattern /^[a-zA-Z0-9 \\x2c-\\x2f]+$/.");
        }

        $this->container['name_alphabet'] = $name_alphabet;

        return $this;
    }

    /**
     * Gets name_short
     *
     * @return string
     */
    public function getNameShort()
    {
        return $this->container['name_short'];
    }

    /**
     * Sets name_short
     *
     * @param string $name_short 表示用の加盟店様名(略称)   設定できる最大長はUTF-8で45byteです。
     *
     * @return self
     */
    public function setNameShort($name_short)
    {
        if (is_null($name_short)) {
            throw new \InvalidArgumentException('non-nullable name_short cannot be null');
        }
        if ((mb_strlen($name_short) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name_short when calling Merchant., must be smaller than or equal to 30.');
        }

        $this->container['name_short'] = $name_short;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name 加盟店様の問い合わせ先名称   設定できる最大長はUTF-8で63byteです。
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        if (is_null($contact_name)) {
            throw new \InvalidArgumentException('non-nullable contact_name cannot be null');
        }
        if ((mb_strlen($contact_name) > 42)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling Merchant., must be smaller than or equal to 42.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email 加盟店様の問い合わせ先メールアドレス   [RFC 5322](https://www.rfc-editor.org/rfc/rfc5322)の仕様に沿った形式のみ許可されます。   #### 決済手段ごとの制限事項   - d払い: `contactEmail`,`contactUrl`,`contactPhone`の合計が96byte以下   ※`/`(半角スラッシュ)は4byteとしてカウント
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        if (is_null($contact_email)) {
            throw new \InvalidArgumentException('non-nullable contact_email cannot be null');
        }
        if ((mb_strlen($contact_email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling Merchant., must be smaller than or equal to 254.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_url
     *
     * @return string|null
     */
    public function getContactUrl()
    {
        return $this->container['contact_url'];
    }

    /**
     * Sets contact_url
     *
     * @param string|null $contact_url 加盟店様の問い合わせ先ページURL   #### 決済手段ごとの制限事項   - d払い: `contactEmail`,`contactUrl`,`contactPhone`の合計が96byte以下   ※`/`(半角スラッシュ)は4byteとしてカウント
     *
     * @return self
     */
    public function setContactUrl($contact_url)
    {
        if (is_null($contact_url)) {
            throw new \InvalidArgumentException('non-nullable contact_url cannot be null');
        }
        if ((mb_strlen($contact_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $contact_url when calling Merchant., must be smaller than or equal to 256.');
        }

        $this->container['contact_url'] = $contact_url;

        return $this;
    }

    /**
     * Gets contact_phone
     *
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     *
     * @param string $contact_phone 加盟店様の問い合わせ先電話番号   #### 決済手段ごとの制限事項   - d払い: `contactEmail`,`contactUrl`,`contactPhone`の合計が96byte以下   ※`/`(半角スラッシュ)は4byteとしてカウント
     *
     * @return self
     */
    public function setContactPhone($contact_phone)
    {
        if (is_null($contact_phone)) {
            throw new \InvalidArgumentException('non-nullable contact_phone cannot be null');
        }
        if ((mb_strlen($contact_phone) > 13)) {
            throw new \InvalidArgumentException('invalid length for $contact_phone when calling Merchant., must be smaller than or equal to 13.');
        }
        if ((!preg_match("/^[0-9-]+$/", ObjectSerializer::toString($contact_phone)))) {
            throw new \InvalidArgumentException("invalid value for \$contact_phone when calling Merchant., must conform to the pattern /^[0-9-]+$/.");
        }

        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets contact_opening_hours
     *
     * @return string
     */
    public function getContactOpeningHours()
    {
        return $this->container['contact_opening_hours'];
    }

    /**
     * Sets contact_opening_hours
     *
     * @param string $contact_opening_hours 加盟店様の問い合わせ窓口の営業時間(HH:MM-HH:MM形式)
     *
     * @return self
     */
    public function setContactOpeningHours($contact_opening_hours)
    {
        if (is_null($contact_opening_hours)) {
            throw new \InvalidArgumentException('non-nullable contact_opening_hours cannot be null');
        }
        if ((mb_strlen($contact_opening_hours) > 11)) {
            throw new \InvalidArgumentException('invalid length for $contact_opening_hours when calling Merchant., must be smaller than or equal to 11.');
        }
        if ((!preg_match("/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/", ObjectSerializer::toString($contact_opening_hours)))) {
            throw new \InvalidArgumentException("invalid value for \$contact_opening_hours when calling Merchant., must conform to the pattern /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]-([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.");
        }

        $this->container['contact_opening_hours'] = $contact_opening_hours;

        return $this;
    }

    /**
     * Gets callback_url
     *
     * @return string|null
     */
    public function getCallbackUrl()
    {
        return $this->container['callback_url'];
    }

    /**
     * Sets callback_url
     *
     * @param string|null $callback_url コールバックURL   リダイレクトが発生するリクエスト時は必ず設定してください。   リダイレクト後に加盟店様のサーバーに処理の遷移を戻すためのURLです。   詳細は[リダイレクトとコールバック](#tag/callback)を参照ください。
     *
     * @return self
     */
    public function setCallbackUrl($callback_url)
    {
        if (is_null($callback_url)) {
            throw new \InvalidArgumentException('non-nullable callback_url cannot be null');
        }
        if ((mb_strlen($callback_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $callback_url when calling Merchant., must be smaller than or equal to 256.');
        }

        $this->container['callback_url'] = $callback_url;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url Webhook URL   現金払いの支払いなど、処理が非同期で行われた場合に、その結果を通知するための加盟店様側のURLです。   httpsから始まるURLを設定してください。   ※テスト環境ではhttpの指定が可能です。   詳細は[Webhook](#tag/webhook)を参照ください。
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        if (is_null($webhook_url)) {
            throw new \InvalidArgumentException('non-nullable webhook_url cannot be null');
        }
        if ((mb_strlen($webhook_url) > 256)) {
            throw new \InvalidArgumentException('invalid length for $webhook_url when calling Merchant., must be smaller than or equal to 256.');
        }

        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets csrf_token
     *
     * @return string|null
     */
    public function getCsrfToken()
    {
        return $this->container['csrf_token'];
    }

    /**
     * Sets csrf_token
     *
     * @param string|null $csrf_token CSRFトークン   コールバックやWebhookの呼び出し時につける任意のパラメーターです。   CSRF対策のために利用してください。   詳細は[リダイレクトとコールバック](#tag/callback)を参照ください。
     *
     * @return self
     */
    public function setCsrfToken($csrf_token)
    {
        if (is_null($csrf_token)) {
            throw new \InvalidArgumentException('non-nullable csrf_token cannot be null');
        }
        if ((mb_strlen($csrf_token) > 36)) {
            throw new \InvalidArgumentException('invalid length for $csrf_token when calling Merchant., must be smaller than or equal to 36.');
        }
        if ((!preg_match("/^[-0-9a-zA-Z\\-]+$/", ObjectSerializer::toString($csrf_token)))) {
            throw new \InvalidArgumentException("invalid value for \$csrf_token when calling Merchant., must conform to the pattern /^[-0-9a-zA-Z\\-]+$/.");
        }

        $this->container['csrf_token'] = $csrf_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


