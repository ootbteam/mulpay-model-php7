<?php
/**
 * Tds2Result
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * Tds2Result Class Doc Comment
 *
 * @category Class
 * @description 3Dセキュア結果情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tds2Result implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tds2Result';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'eci' => 'string',
        'requires_challenge' => 'bool',
        'tds2_trans_result' => 'string',
        'tds2_trans_result_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'eci' => null,
        'requires_challenge' => null,
        'tds2_trans_result' => null,
        'tds2_trans_result_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'eci' => false,
        'requires_challenge' => false,
        'tds2_trans_result' => false,
        'tds2_trans_result_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'eci' => 'eci',
        'requires_challenge' => 'requiresChallenge',
        'tds2_trans_result' => 'tds2TransResult',
        'tds2_trans_result_reason' => 'tds2TransResultReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'eci' => 'setEci',
        'requires_challenge' => 'setRequiresChallenge',
        'tds2_trans_result' => 'setTds2TransResult',
        'tds2_trans_result_reason' => 'setTds2TransResultReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'eci' => 'getEci',
        'requires_challenge' => 'getRequiresChallenge',
        'tds2_trans_result' => 'getTds2TransResult',
        'tds2_trans_result_reason' => 'getTds2TransResultReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TDS2_TRANS_RESULT_Y = 'Y';
    public const TDS2_TRANS_RESULT_A = 'A';
    public const TDS2_TRANS_RESULT_C = 'C';
    public const TDS2_TRANS_RESULT_N = 'N';
    public const TDS2_TRANS_RESULT_U = 'U';
    public const TDS2_TRANS_RESULT_R = 'R';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTds2TransResultAllowableValues()
    {
        return [
            self::TDS2_TRANS_RESULT_Y,
            self::TDS2_TRANS_RESULT_A,
            self::TDS2_TRANS_RESULT_C,
            self::TDS2_TRANS_RESULT_N,
            self::TDS2_TRANS_RESULT_U,
            self::TDS2_TRANS_RESULT_R,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('eci', $data ?? [], null);
        $this->setIfExists('requires_challenge', $data ?? [], null);
        $this->setIfExists('tds2_trans_result', $data ?? [], null);
        $this->setIfExists('tds2_trans_result_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTds2TransResultAllowableValues();
        if (!is_null($this->container['tds2_trans_result']) && !in_array($this->container['tds2_trans_result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tds2_trans_result', must be one of '%s'",
                $this->container['tds2_trans_result'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['tds2_trans_result_reason']) && !preg_match("/^[0-2][0-9]$/", $this->container['tds2_trans_result_reason'])) {
            $invalidProperties[] = "invalid value for 'tds2_trans_result_reason', must be conform to the pattern /^[0-2][0-9]$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets eci
     *
     * @return string|null
     */
    public function getEci()
    {
        return $this->container['eci'];
    }

    /**
     * Sets eci
     *
     * @param string|null $eci ECI値
     *
     * @return self
     */
    public function setEci($eci)
    {
        if (is_null($eci)) {
            throw new \InvalidArgumentException('non-nullable eci cannot be null');
        }
        $this->container['eci'] = $eci;

        return $this;
    }

    /**
     * Gets requires_challenge
     *
     * @return bool|null
     */
    public function getRequiresChallenge()
    {
        return $this->container['requires_challenge'];
    }

    /**
     * Sets requires_challenge
     *
     * @param bool|null $requires_challenge 認証チャレンジ必須 3Dセキュア認証をチャレンジ必須化で処理をしたかを表します。
     *
     * @return self
     */
    public function setRequiresChallenge($requires_challenge)
    {
        if (is_null($requires_challenge)) {
            throw new \InvalidArgumentException('non-nullable requires_challenge cannot be null');
        }
        $this->container['requires_challenge'] = $requires_challenge;

        return $this;
    }

    /**
     * Gets tds2_trans_result
     *
     * @return string|null
     */
    public function getTds2TransResult()
    {
        return $this->container['tds2_trans_result'];
    }

    /**
     * Sets tds2_trans_result
     *
     * @param string|null $tds2_trans_result 認証結果   - `Y`：認証／口座確認に成功 - `A`：処理の試行が実施された - `C`：認証チャレンジが必要 - `N`：未認証／口座未確認 取引拒否 - `U`：認証／口座確認を実行できなかった - `R`：認証／口座確認が拒否された
     *
     * @return self
     */
    public function setTds2TransResult($tds2_trans_result)
    {
        if (is_null($tds2_trans_result)) {
            throw new \InvalidArgumentException('non-nullable tds2_trans_result cannot be null');
        }
        $allowedValues = $this->getTds2TransResultAllowableValues();
        if (!in_array($tds2_trans_result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tds2_trans_result', must be one of '%s'",
                    $tds2_trans_result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tds2_trans_result'] = $tds2_trans_result;

        return $this;
    }

    /**
     * Gets tds2_trans_result_reason
     *
     * @return string|null
     */
    public function getTds2TransResultReason()
    {
        return $this->container['tds2_trans_result_reason'];
    }

    /**
     * Sets tds2_trans_result_reason
     *
     * @param string|null $tds2_trans_result_reason 認証結果理由<br>01:カード認証に失敗した<br>02:不明なデバイス<br>03:サポートされていないデバイス<br>04:認証頻度の上限を超えた<br>05:有効期限切れのカード<br>06:無効なカード番号<br>07:無効な取引<br>08:カードのレコードが存在しない<br>09:セキュリティ障害<br>10:盗難カード<br>11:不正の疑い<br>12:カード会員に取引が許可されていない<br>13:カード会員がサービスに登録されていない<br>14:取引がACSでタイムアウトした<br>15:信頼度が低い<br>16:信頼度が中程度<br>17:信頼度が高い<br>18:信頼度が非常に高い<br>19:ACSの最大チャレンジを超える<br>20:非決済取引はサポートされていません<br>21:3RIトランザクションはサポートされていません
     *
     * @return self
     */
    public function setTds2TransResultReason($tds2_trans_result_reason)
    {
        if (is_null($tds2_trans_result_reason)) {
            throw new \InvalidArgumentException('non-nullable tds2_trans_result_reason cannot be null');
        }

        if ((!preg_match("/^[0-2][0-9]$/", ObjectSerializer::toString($tds2_trans_result_reason)))) {
            throw new \InvalidArgumentException("invalid value for \$tds2_trans_result_reason when calling Tds2Result., must conform to the pattern /^[0-2][0-9]$/.");
        }

        $this->container['tds2_trans_result_reason'] = $tds2_trans_result_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


