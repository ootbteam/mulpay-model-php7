<?php
/**
 * OnfileCardOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * OnfileCardOptions Class Doc Comment
 *
 * @category Class
 * @description カード登録オプション情報   カード情報を会員に紐づけて登録する必要がない場合は、このパラメーターを設定しないでください。
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OnfileCardOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OnfileCardOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'member_id' => 'string',
        'member_name' => 'string',
        'card_id' => 'string',
        'create_new_member' => 'bool',
        'set_default' => 'bool',
        'duplication_check_options' => '\OotbTeam\MulPay\Model\DuplicationCheckOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'member_id' => null,
        'member_name' => null,
        'card_id' => null,
        'create_new_member' => null,
        'set_default' => null,
        'duplication_check_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'member_id' => false,
        'member_name' => false,
        'card_id' => false,
        'create_new_member' => false,
        'set_default' => false,
        'duplication_check_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_id' => 'memberId',
        'member_name' => 'memberName',
        'card_id' => 'cardId',
        'create_new_member' => 'createNewMember',
        'set_default' => 'setDefault',
        'duplication_check_options' => 'duplicationCheckOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_id' => 'setMemberId',
        'member_name' => 'setMemberName',
        'card_id' => 'setCardId',
        'create_new_member' => 'setCreateNewMember',
        'set_default' => 'setSetDefault',
        'duplication_check_options' => 'setDuplicationCheckOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_id' => 'getMemberId',
        'member_name' => 'getMemberName',
        'card_id' => 'getCardId',
        'create_new_member' => 'getCreateNewMember',
        'set_default' => 'getSetDefault',
        'duplication_check_options' => 'getDuplicationCheckOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('member_name', $data ?? [], null);
        $this->setIfExists('card_id', $data ?? [], null);
        $this->setIfExists('create_new_member', $data ?? [], false);
        $this->setIfExists('set_default', $data ?? [], false);
        $this->setIfExists('duplication_check_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['member_id'] === null) {
            $invalidProperties[] = "'member_id' can't be null";
        }
        if (!preg_match("/^[a-zA-Z0-9-@_ . ]{1,60}$/", $this->container['member_id'])) {
            $invalidProperties[] = "invalid value for 'member_id', must be conform to the pattern /^[a-zA-Z0-9-@_ . ]{1,60}$/.";
        }

        if (!is_null($this->container['member_name']) && (mb_strlen($this->container['member_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'member_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['card_id']) && !preg_match("/^[0-9]{1,4}$/", $this->container['card_id'])) {
            $invalidProperties[] = "invalid value for 'card_id', must be conform to the pattern /^[0-9]{1,4}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id 会員ID
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            throw new \InvalidArgumentException('non-nullable member_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9-@_ . ]{1,60}$/", ObjectSerializer::toString($member_id)))) {
            throw new \InvalidArgumentException("invalid value for \$member_id when calling OnfileCardOptions., must conform to the pattern /^[a-zA-Z0-9-@_ . ]{1,60}$/.");
        }

        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_name
     *
     * @return string|null
     */
    public function getMemberName()
    {
        return $this->container['member_name'];
    }

    /**
     * Sets member_name
     *
     * @param string|null $member_name 会員名
     *
     * @return self
     */
    public function setMemberName($member_name)
    {
        if (is_null($member_name)) {
            throw new \InvalidArgumentException('non-nullable member_name cannot be null');
        }
        if ((mb_strlen($member_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $member_name when calling OnfileCardOptions., must be smaller than or equal to 255.');
        }

        $this->container['member_name'] = $member_name;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string|null
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string|null $card_id カードのID   登録されているカードのID(物理連番)です。
     *
     * @return self
     */
    public function setCardId($card_id)
    {
        if (is_null($card_id)) {
            throw new \InvalidArgumentException('non-nullable card_id cannot be null');
        }

        if ((!preg_match("/^[0-9]{1,4}$/", ObjectSerializer::toString($card_id)))) {
            throw new \InvalidArgumentException("invalid value for \$card_id when calling OnfileCardOptions., must conform to the pattern /^[0-9]{1,4}$/.");
        }

        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets create_new_member
     *
     * @return bool|null
     */
    public function getCreateNewMember()
    {
        return $this->container['create_new_member'];
    }

    /**
     * Sets create_new_member
     *
     * @param bool|null $create_new_member 会員ID未登録時の新規作成   `true`にすると、指定した会員IDが存在しない場合に新規登録します。
     *
     * @return self
     */
    public function setCreateNewMember($create_new_member)
    {
        if (is_null($create_new_member)) {
            throw new \InvalidArgumentException('non-nullable create_new_member cannot be null');
        }
        $this->container['create_new_member'] = $create_new_member;

        return $this;
    }

    /**
     * Gets set_default
     *
     * @return bool|null
     */
    public function getSetDefault()
    {
        return $this->container['set_default'];
    }

    /**
     * Sets set_default
     *
     * @param bool|null $set_default デフォルト設定   `true`にすると、このカードがデフォルトカードとして登録されます。   デフォルトカードにした場合、随時支払い時にカードのID(物理連番)`cardId`、またインデックス(論理連番)`index`の設定が不要です。   また、洗替や一括決済サービス時に「カード登録連番」を設定することなく利用できます。
     *
     * @return self
     */
    public function setSetDefault($set_default)
    {
        if (is_null($set_default)) {
            throw new \InvalidArgumentException('non-nullable set_default cannot be null');
        }
        $this->container['set_default'] = $set_default;

        return $this;
    }

    /**
     * Gets duplication_check_options
     *
     * @return \OotbTeam\MulPay\Model\DuplicationCheckOptions|null
     */
    public function getDuplicationCheckOptions()
    {
        return $this->container['duplication_check_options'];
    }

    /**
     * Sets duplication_check_options
     *
     * @param \OotbTeam\MulPay\Model\DuplicationCheckOptions|null $duplication_check_options duplication_check_options
     *
     * @return self
     */
    public function setDuplicationCheckOptions($duplication_check_options)
    {
        if (is_null($duplication_check_options)) {
            throw new \InvalidArgumentException('non-nullable duplication_check_options cannot be null');
        }
        $this->container['duplication_check_options'] = $duplication_check_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


