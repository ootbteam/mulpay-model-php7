<?php
/**
 * CardDetailResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * CardDetailResult Class Doc Comment
 *
 * @category Class
 * @description カード詳細情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CardDetailResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CardDetailResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'card_number' => 'string',
        'cardholder_name' => 'string',
        'expiry_month' => 'string',
        'expiry_year' => 'string',
        'brand' => 'string',
        'issuer_location' => 'string',
        'issuer_code' => 'string',
        'debit_information' => '\OotbTeam\MulPay\Model\DebitInformation',
        'client_card_bin_data' => '\OotbTeam\MulPay\Model\ClientCardBinData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'card_number' => null,
        'cardholder_name' => null,
        'expiry_month' => null,
        'expiry_year' => null,
        'brand' => null,
        'issuer_location' => null,
        'issuer_code' => null,
        'debit_information' => null,
        'client_card_bin_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'card_number' => false,
        'cardholder_name' => false,
        'expiry_month' => false,
        'expiry_year' => false,
        'brand' => false,
        'issuer_location' => false,
        'issuer_code' => false,
        'debit_information' => false,
        'client_card_bin_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_number' => 'cardNumber',
        'cardholder_name' => 'cardholderName',
        'expiry_month' => 'expiryMonth',
        'expiry_year' => 'expiryYear',
        'brand' => 'brand',
        'issuer_location' => 'issuerLocation',
        'issuer_code' => 'issuerCode',
        'debit_information' => 'debitInformation',
        'client_card_bin_data' => 'clientCardBinData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_number' => 'setCardNumber',
        'cardholder_name' => 'setCardholderName',
        'expiry_month' => 'setExpiryMonth',
        'expiry_year' => 'setExpiryYear',
        'brand' => 'setBrand',
        'issuer_location' => 'setIssuerLocation',
        'issuer_code' => 'setIssuerCode',
        'debit_information' => 'setDebitInformation',
        'client_card_bin_data' => 'setClientCardBinData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_number' => 'getCardNumber',
        'cardholder_name' => 'getCardholderName',
        'expiry_month' => 'getExpiryMonth',
        'expiry_year' => 'getExpiryYear',
        'brand' => 'getBrand',
        'issuer_location' => 'getIssuerLocation',
        'issuer_code' => 'getIssuerCode',
        'debit_information' => 'getDebitInformation',
        'client_card_bin_data' => 'getClientCardBinData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BRAND_VISA = 'VISA';
    public const BRAND_MASTERCARD = 'MASTERCARD';
    public const BRAND_JCB = 'JCB';
    public const BRAND_DINERS = 'DINERS';
    public const BRAND_AMEX = 'AMEX';
    public const BRAND_UNKNOWN = 'UNKNOWN';
    public const ISSUER_LOCATION_JP = 'JP';
    public const ISSUER_LOCATION_INTERNATIONAL = 'INTERNATIONAL';
    public const ISSUER_LOCATION_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBrandAllowableValues()
    {
        return [
            self::BRAND_VISA,
            self::BRAND_MASTERCARD,
            self::BRAND_JCB,
            self::BRAND_DINERS,
            self::BRAND_AMEX,
            self::BRAND_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssuerLocationAllowableValues()
    {
        return [
            self::ISSUER_LOCATION_JP,
            self::ISSUER_LOCATION_INTERNATIONAL,
            self::ISSUER_LOCATION_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('card_number', $data ?? [], null);
        $this->setIfExists('cardholder_name', $data ?? [], null);
        $this->setIfExists('expiry_month', $data ?? [], null);
        $this->setIfExists('expiry_year', $data ?? [], null);
        $this->setIfExists('brand', $data ?? [], null);
        $this->setIfExists('issuer_location', $data ?? [], null);
        $this->setIfExists('issuer_code', $data ?? [], null);
        $this->setIfExists('debit_information', $data ?? [], null);
        $this->setIfExists('client_card_bin_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBrandAllowableValues();
        if (!is_null($this->container['brand']) && !in_array($this->container['brand'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'brand', must be one of '%s'",
                $this->container['brand'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssuerLocationAllowableValues();
        if (!is_null($this->container['issuer_location']) && !in_array($this->container['issuer_location'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'issuer_location', must be one of '%s'",
                $this->container['issuer_location'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets card_number
     *
     * @return string|null
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string|null $card_number カード番号   下4桁(**********9999)固定でマスクされます。
     *
     * @return self
     */
    public function setCardNumber($card_number)
    {
        if (is_null($card_number)) {
            throw new \InvalidArgumentException('non-nullable card_number cannot be null');
        }
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string|null
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string|null $cardholder_name 利用されたカードの名義人
     *
     * @return self
     */
    public function setCardholderName($cardholder_name)
    {
        if (is_null($cardholder_name)) {
            throw new \InvalidArgumentException('non-nullable cardholder_name cannot be null');
        }
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets expiry_month
     *
     * @return string|null
     */
    public function getExpiryMonth()
    {
        return $this->container['expiry_month'];
    }

    /**
     * Sets expiry_month
     *
     * @param string|null $expiry_month カードの有効期限(月)
     *
     * @return self
     */
    public function setExpiryMonth($expiry_month)
    {
        if (is_null($expiry_month)) {
            throw new \InvalidArgumentException('non-nullable expiry_month cannot be null');
        }
        $this->container['expiry_month'] = $expiry_month;

        return $this;
    }

    /**
     * Gets expiry_year
     *
     * @return string|null
     */
    public function getExpiryYear()
    {
        return $this->container['expiry_year'];
    }

    /**
     * Sets expiry_year
     *
     * @param string|null $expiry_year カードの有効期限(年)
     *
     * @return self
     */
    public function setExpiryYear($expiry_year)
    {
        if (is_null($expiry_year)) {
            throw new \InvalidArgumentException('non-nullable expiry_year cannot be null');
        }
        $this->container['expiry_year'] = $expiry_year;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand カードのブランド
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $allowedValues = $this->getBrandAllowableValues();
        if (!in_array($brand, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'brand', must be one of '%s'",
                    $brand,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets issuer_location
     *
     * @return string|null
     */
    public function getIssuerLocation()
    {
        return $this->container['issuer_location'];
    }

    /**
     * Sets issuer_location
     *
     * @param string|null $issuer_location カードの発行会社所在地 - `JP`：日本国内 - `INTERNATIONAL`：海外 - `UNKNOWN`：不明
     *
     * @return self
     */
    public function setIssuerLocation($issuer_location)
    {
        if (is_null($issuer_location)) {
            throw new \InvalidArgumentException('non-nullable issuer_location cannot be null');
        }
        $allowedValues = $this->getIssuerLocationAllowableValues();
        if (!in_array($issuer_location, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'issuer_location', must be one of '%s'",
                    $issuer_location,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issuer_location'] = $issuer_location;

        return $this;
    }

    /**
     * Gets issuer_code
     *
     * @return string|null
     */
    public function getIssuerCode()
    {
        return $this->container['issuer_code'];
    }

    /**
     * Sets issuer_code
     *
     * @param string|null $issuer_code カードの発行カード会社コード
     *
     * @return self
     */
    public function setIssuerCode($issuer_code)
    {
        if (is_null($issuer_code)) {
            throw new \InvalidArgumentException('non-nullable issuer_code cannot be null');
        }
        $this->container['issuer_code'] = $issuer_code;

        return $this;
    }

    /**
     * Gets debit_information
     *
     * @return \OotbTeam\MulPay\Model\DebitInformation|null
     */
    public function getDebitInformation()
    {
        return $this->container['debit_information'];
    }

    /**
     * Sets debit_information
     *
     * @param \OotbTeam\MulPay\Model\DebitInformation|null $debit_information debit_information
     *
     * @return self
     */
    public function setDebitInformation($debit_information)
    {
        if (is_null($debit_information)) {
            throw new \InvalidArgumentException('non-nullable debit_information cannot be null');
        }
        $this->container['debit_information'] = $debit_information;

        return $this;
    }

    /**
     * Gets client_card_bin_data
     *
     * @return \OotbTeam\MulPay\Model\ClientCardBinData|null
     */
    public function getClientCardBinData()
    {
        return $this->container['client_card_bin_data'];
    }

    /**
     * Sets client_card_bin_data
     *
     * @param \OotbTeam\MulPay\Model\ClientCardBinData|null $client_card_bin_data client_card_bin_data
     *
     * @return self
     */
    public function setClientCardBinData($client_card_bin_data)
    {
        if (is_null($client_card_bin_data)) {
            throw new \InvalidArgumentException('non-nullable client_card_bin_data cannot be null');
        }
        $this->container['client_card_bin_data'] = $client_card_bin_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


