<?php
/**
 * CreditChargeOptions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * CreditChargeOptions Class Doc Comment
 *
 * @category Class
 * @description クレカ払いオプション情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditChargeOptions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditChargeOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_mode' => 'string',
        'use_tds2' => 'bool',
        'use_fraud_detection' => 'bool',
        'item_code' => 'string',
        'payment_method' => 'string',
        'installments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_mode' => null,
        'use_tds2' => null,
        'use_fraud_detection' => null,
        'item_code' => null,
        'payment_method' => null,
        'installments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_mode' => false,
        'use_tds2' => false,
        'use_fraud_detection' => false,
        'item_code' => false,
        'payment_method' => false,
        'installments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_mode' => 'authorizationMode',
        'use_tds2' => 'useTds2',
        'use_fraud_detection' => 'useFraudDetection',
        'item_code' => 'itemCode',
        'payment_method' => 'paymentMethod',
        'installments' => 'installments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_mode' => 'setAuthorizationMode',
        'use_tds2' => 'setUseTds2',
        'use_fraud_detection' => 'setUseFraudDetection',
        'item_code' => 'setItemCode',
        'payment_method' => 'setPaymentMethod',
        'installments' => 'setInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_mode' => 'getAuthorizationMode',
        'use_tds2' => 'getUseTds2',
        'use_fraud_detection' => 'getUseFraudDetection',
        'item_code' => 'getItemCode',
        'payment_method' => 'getPaymentMethod',
        'installments' => 'getInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const AUTHORIZATION_MODE_AUTH = 'AUTH';
    public const AUTHORIZATION_MODE_CAPTURE = 'CAPTURE';
    public const PAYMENT_METHOD_ONE_TIME = 'ONE_TIME';
    public const PAYMENT_METHOD_INSTALLMENT = 'INSTALLMENT';
    public const PAYMENT_METHOD_BONUS_ONE_TIME = 'BONUS_ONE_TIME';
    public const PAYMENT_METHOD_REVOLVING = 'REVOLVING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthorizationModeAllowableValues()
    {
        return [
            self::AUTHORIZATION_MODE_AUTH,
            self::AUTHORIZATION_MODE_CAPTURE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentMethodAllowableValues()
    {
        return [
            self::PAYMENT_METHOD_ONE_TIME,
            self::PAYMENT_METHOD_INSTALLMENT,
            self::PAYMENT_METHOD_BONUS_ONE_TIME,
            self::PAYMENT_METHOD_REVOLVING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_mode', $data ?? [], 'AUTH');
        $this->setIfExists('use_tds2', $data ?? [], true);
        $this->setIfExists('use_fraud_detection', $data ?? [], false);
        $this->setIfExists('item_code', $data ?? [], '0000990');
        $this->setIfExists('payment_method', $data ?? [], 'ONE_TIME');
        $this->setIfExists('installments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authorization_mode'] === null) {
            $invalidProperties[] = "'authorization_mode' can't be null";
        }
        $allowedValues = $this->getAuthorizationModeAllowableValues();
        if (!is_null($this->container['authorization_mode']) && !in_array($this->container['authorization_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'authorization_mode', must be one of '%s'",
                $this->container['authorization_mode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['item_code']) && !preg_match("/^0000[0-9]{3}$/", $this->container['item_code'])) {
            $invalidProperties[] = "invalid value for 'item_code', must be conform to the pattern /^0000[0-9]{3}$/.";
        }

        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!is_null($this->container['payment_method']) && !in_array($this->container['payment_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_method', must be one of '%s'",
                $this->container['payment_method'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['installments']) && !preg_match("/^[0-9]{1,2}$/", $this->container['installments'])) {
            $invalidProperties[] = "invalid value for 'installments', must be conform to the pattern /^[0-9]{1,2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_mode
     *
     * @return string
     */
    public function getAuthorizationMode()
    {
        return $this->container['authorization_mode'];
    }

    /**
     * Sets authorization_mode
     *
     * @param string $authorization_mode 支払い要求のタイプ   - `AUTH`：仮売上 - `CAPTURE`：即時売上
     *
     * @return self
     */
    public function setAuthorizationMode($authorization_mode)
    {
        if (is_null($authorization_mode)) {
            throw new \InvalidArgumentException('non-nullable authorization_mode cannot be null');
        }
        $allowedValues = $this->getAuthorizationModeAllowableValues();
        if (!in_array($authorization_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'authorization_mode', must be one of '%s'",
                    $authorization_mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authorization_mode'] = $authorization_mode;

        return $this;
    }

    /**
     * Gets use_tds2
     *
     * @return bool|null
     */
    public function getUseTds2()
    {
        return $this->container['use_tds2'];
    }

    /**
     * Sets use_tds2
     *
     * @param bool|null $use_tds2 3Dセキュア認証の利用有無   `true`、または設定なしの場合は、3Dセキュア認証が行われます。   `false`を設定し、3Dセキュア認証を利用しないオーソリ(信用照会)は、不正利用によりチャージバックとなった場合に、加盟店様が支払いの責任を負う可能性があります。 Apple Payは利用できません。
     *
     * @return self
     */
    public function setUseTds2($use_tds2)
    {
        if (is_null($use_tds2)) {
            throw new \InvalidArgumentException('non-nullable use_tds2 cannot be null');
        }
        $this->container['use_tds2'] = $use_tds2;

        return $this;
    }

    /**
     * Gets use_fraud_detection
     *
     * @return bool|null
     */
    public function getUseFraudDetection()
    {
        return $this->container['use_fraud_detection'];
    }

    /**
     * Sets use_fraud_detection
     *
     * @param bool|null $use_fraud_detection 不正検知の利用有無   Apple Payは利用できません。
     *
     * @return self
     */
    public function setUseFraudDetection($use_fraud_detection)
    {
        if (is_null($use_fraud_detection)) {
            throw new \InvalidArgumentException('non-nullable use_fraud_detection cannot be null');
        }
        $this->container['use_fraud_detection'] = $use_fraud_detection;

        return $this;
    }

    /**
     * Gets item_code
     *
     * @return string|null
     */
    public function getItemCode()
    {
        return $this->container['item_code'];
    }

    /**
     * Sets item_code
     *
     * @param string|null $item_code 商品番号   加盟店様とカード会社との契約で定められた場合のみ設定します。   省略時はデフォルトで「0000990」が設定されます。
     *
     * @return self
     */
    public function setItemCode($item_code)
    {
        if (is_null($item_code)) {
            throw new \InvalidArgumentException('non-nullable item_code cannot be null');
        }

        if ((!preg_match("/^0000[0-9]{3}$/", ObjectSerializer::toString($item_code)))) {
            throw new \InvalidArgumentException("invalid value for \$item_code when calling CreditChargeOptions., must conform to the pattern /^0000[0-9]{3}$/.");
        }

        $this->container['item_code'] = $item_code;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string|null $payment_method 支払方法   Apple Payは一括払い固定になります。   - `ONE_TIME`：一括 - `INSTALLMENT`：分割 - `BONUS_ONE_TIME`：ボーナス一括 - `REVOLVING`：リボ
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {
        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }
        $allowedValues = $this->getPaymentMethodAllowableValues();
        if (!in_array($payment_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_method', must be one of '%s'",
                    $payment_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return string|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param string|null $installments 分割回数   支払方法が分割の場合に設定します。   設定可能な分割回数は契約により異なります。
     *
     * @return self
     */
    public function setInstallments($installments)
    {
        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }

        if ((!preg_match("/^[0-9]{1,2}$/", ObjectSerializer::toString($installments)))) {
            throw new \InvalidArgumentException("invalid value for \$installments when calling CreditChargeOptions., must conform to the pattern /^[0-9]{1,2}$/.");
        }

        $this->container['installments'] = $installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


