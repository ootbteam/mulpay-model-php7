<?php
/**
 * OrderReferenceCredit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * OrderReferenceCredit Class Doc Comment
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderReferenceCredit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderReferenceCredit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_id' => 'string',
        'access_pass' => 'string',
        'order_id' => 'string',
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'amount' => 'string',
        'client_fields' => '\OotbTeam\MulPay\Model\ClientFields',
        'status' => '\OotbTeam\MulPay\Model\StatusCredit',
        'charge_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_id' => null,
        'access_pass' => null,
        'order_id' => null,
        'created' => 'date-time',
        'updated' => 'date-time',
        'amount' => null,
        'client_fields' => null,
        'status' => null,
        'charge_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'access_id' => false,
        'access_pass' => false,
        'order_id' => false,
        'created' => false,
        'updated' => false,
        'amount' => false,
        'client_fields' => false,
        'status' => false,
        'charge_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_id' => 'accessId',
        'access_pass' => 'accessPass',
        'order_id' => 'orderId',
        'created' => 'created',
        'updated' => 'updated',
        'amount' => 'amount',
        'client_fields' => 'clientFields',
        'status' => 'status',
        'charge_type' => 'chargeType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_id' => 'setAccessId',
        'access_pass' => 'setAccessPass',
        'order_id' => 'setOrderId',
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'amount' => 'setAmount',
        'client_fields' => 'setClientFields',
        'status' => 'setStatus',
        'charge_type' => 'setChargeType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_id' => 'getAccessId',
        'access_pass' => 'getAccessPass',
        'order_id' => 'getOrderId',
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'amount' => 'getAmount',
        'client_fields' => 'getClientFields',
        'status' => 'getStatus',
        'charge_type' => 'getChargeType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHARGE_TYPE_CREDIT = 'CREDIT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChargeTypeAllowableValues()
    {
        return [
            self::CHARGE_TYPE_CREDIT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('access_id', $data ?? [], null);
        $this->setIfExists('access_pass', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('client_fields', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('charge_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['access_id']) && !preg_match("/^[a-zA-Z0-9]{32}$/", $this->container['access_id'])) {
            $invalidProperties[] = "invalid value for 'access_id', must be conform to the pattern /^[a-zA-Z0-9]{32}$/.";
        }

        if (!is_null($this->container['access_pass']) && !preg_match("/^[a-zA-Z0-9]{32}$/", $this->container['access_pass'])) {
            $invalidProperties[] = "invalid value for 'access_pass', must be conform to the pattern /^[a-zA-Z0-9]{32}$/.";
        }

        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!is_null($this->container['charge_type']) && !in_array($this->container['charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'charge_type', must be one of '%s'",
                $this->container['charge_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_id
     *
     * @return string|null
     */
    public function getAccessId()
    {
        return $this->container['access_id'];
    }

    /**
     * Sets access_id
     *
     * @param string|null $access_id 取引ID
     *
     * @return self
     */
    public function setAccessId($access_id)
    {
        if (is_null($access_id)) {
            throw new \InvalidArgumentException('non-nullable access_id cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9]{32}$/", ObjectSerializer::toString($access_id)))) {
            throw new \InvalidArgumentException("invalid value for \$access_id when calling OrderReferenceCredit., must conform to the pattern /^[a-zA-Z0-9]{32}$/.");
        }

        $this->container['access_id'] = $access_id;

        return $this;
    }

    /**
     * Gets access_pass
     *
     * @return string|null
     */
    public function getAccessPass()
    {
        return $this->container['access_pass'];
    }

    /**
     * Sets access_pass
     *
     * @param string|null $access_pass 取引パスワード<br>OpenAPIタイプでは利用しません。モジュールタイプ・プロトコルタイプで利用します。
     *
     * @return self
     */
    public function setAccessPass($access_pass)
    {
        if (is_null($access_pass)) {
            throw new \InvalidArgumentException('non-nullable access_pass cannot be null');
        }

        if ((!preg_match("/^[a-zA-Z0-9]{32}$/", ObjectSerializer::toString($access_pass)))) {
            throw new \InvalidArgumentException("invalid value for \$access_pass when calling OrderReferenceCredit., must conform to the pattern /^[a-zA-Z0-9]{32}$/.");
        }

        $this->container['access_pass'] = $access_pass;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id リクエスト時に設定したオーダーID
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created 開始日時<br> [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-05-30T12:34:56+09:00
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime|null $updated 最終更新日時   [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)で定義された表記   例) 2023-05-30T12:34:56+09:00
     *
     * @return self
     */
    public function setUpdated($updated)
    {
        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount リクエスト時に設定した税送料込の取引金額
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets client_fields
     *
     * @return \OotbTeam\MulPay\Model\ClientFields|null
     */
    public function getClientFields()
    {
        return $this->container['client_fields'];
    }

    /**
     * Sets client_fields
     *
     * @param \OotbTeam\MulPay\Model\ClientFields|null $client_fields リクエスト時に設定した加盟店自由項目
     *
     * @return self
     */
    public function setClientFields($client_fields)
    {
        if (is_null($client_fields)) {
            throw new \InvalidArgumentException('non-nullable client_fields cannot be null');
        }
        $this->container['client_fields'] = $client_fields;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OotbTeam\MulPay\Model\StatusCredit|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OotbTeam\MulPay\Model\StatusCredit|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets charge_type
     *
     * @return string|null
     */
    public function getChargeType()
    {
        return $this->container['charge_type'];
    }

    /**
     * Sets charge_type
     *
     * @param string|null $charge_type 支払いタイプ   - `CREDIT`: クレカ払い
     *
     * @return self
     */
    public function setChargeType($charge_type)
    {
        if (is_null($charge_type)) {
            throw new \InvalidArgumentException('non-nullable charge_type cannot be null');
        }
        $allowedValues = $this->getChargeTypeAllowableValues();
        if (!in_array($charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'charge_type', must be one of '%s'",
                    $charge_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['charge_type'] = $charge_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


