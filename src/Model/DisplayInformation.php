<?php
/**
 * DisplayInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * DisplayInformation Class Doc Comment
 *
 * @category Class
 * @description 画面・明細表示情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DisplayInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DisplayInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'register_display1' => 'string',
        'register_display2' => 'string',
        'register_display3' => 'string',
        'register_display4' => 'string',
        'register_display5' => 'string',
        'register_display6' => 'string',
        'register_display7' => 'string',
        'register_display8' => 'string',
        'receipt_display1' => 'string',
        'receipt_display2' => 'string',
        'receipt_display3' => 'string',
        'receipt_display4' => 'string',
        'receipt_display5' => 'string',
        'receipt_display6' => 'string',
        'receipt_display7' => 'string',
        'receipt_display8' => 'string',
        'receipt_display9' => 'string',
        'receipt_display10' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'register_display1' => null,
        'register_display2' => null,
        'register_display3' => null,
        'register_display4' => null,
        'register_display5' => null,
        'register_display6' => null,
        'register_display7' => null,
        'register_display8' => null,
        'receipt_display1' => null,
        'receipt_display2' => null,
        'receipt_display3' => null,
        'receipt_display4' => null,
        'receipt_display5' => null,
        'receipt_display6' => null,
        'receipt_display7' => null,
        'receipt_display8' => null,
        'receipt_display9' => null,
        'receipt_display10' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'register_display1' => false,
        'register_display2' => false,
        'register_display3' => false,
        'register_display4' => false,
        'register_display5' => false,
        'register_display6' => false,
        'register_display7' => false,
        'register_display8' => false,
        'receipt_display1' => false,
        'receipt_display2' => false,
        'receipt_display3' => false,
        'receipt_display4' => false,
        'receipt_display5' => false,
        'receipt_display6' => false,
        'receipt_display7' => false,
        'receipt_display8' => false,
        'receipt_display9' => false,
        'receipt_display10' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'register_display1' => 'registerDisplay1',
        'register_display2' => 'registerDisplay2',
        'register_display3' => 'registerDisplay3',
        'register_display4' => 'registerDisplay4',
        'register_display5' => 'registerDisplay5',
        'register_display6' => 'registerDisplay6',
        'register_display7' => 'registerDisplay7',
        'register_display8' => 'registerDisplay8',
        'receipt_display1' => 'receiptDisplay1',
        'receipt_display2' => 'receiptDisplay2',
        'receipt_display3' => 'receiptDisplay3',
        'receipt_display4' => 'receiptDisplay4',
        'receipt_display5' => 'receiptDisplay5',
        'receipt_display6' => 'receiptDisplay6',
        'receipt_display7' => 'receiptDisplay7',
        'receipt_display8' => 'receiptDisplay8',
        'receipt_display9' => 'receiptDisplay9',
        'receipt_display10' => 'receiptDisplay10'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'register_display1' => 'setRegisterDisplay1',
        'register_display2' => 'setRegisterDisplay2',
        'register_display3' => 'setRegisterDisplay3',
        'register_display4' => 'setRegisterDisplay4',
        'register_display5' => 'setRegisterDisplay5',
        'register_display6' => 'setRegisterDisplay6',
        'register_display7' => 'setRegisterDisplay7',
        'register_display8' => 'setRegisterDisplay8',
        'receipt_display1' => 'setReceiptDisplay1',
        'receipt_display2' => 'setReceiptDisplay2',
        'receipt_display3' => 'setReceiptDisplay3',
        'receipt_display4' => 'setReceiptDisplay4',
        'receipt_display5' => 'setReceiptDisplay5',
        'receipt_display6' => 'setReceiptDisplay6',
        'receipt_display7' => 'setReceiptDisplay7',
        'receipt_display8' => 'setReceiptDisplay8',
        'receipt_display9' => 'setReceiptDisplay9',
        'receipt_display10' => 'setReceiptDisplay10'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'register_display1' => 'getRegisterDisplay1',
        'register_display2' => 'getRegisterDisplay2',
        'register_display3' => 'getRegisterDisplay3',
        'register_display4' => 'getRegisterDisplay4',
        'register_display5' => 'getRegisterDisplay5',
        'register_display6' => 'getRegisterDisplay6',
        'register_display7' => 'getRegisterDisplay7',
        'register_display8' => 'getRegisterDisplay8',
        'receipt_display1' => 'getReceiptDisplay1',
        'receipt_display2' => 'getReceiptDisplay2',
        'receipt_display3' => 'getReceiptDisplay3',
        'receipt_display4' => 'getReceiptDisplay4',
        'receipt_display5' => 'getReceiptDisplay5',
        'receipt_display6' => 'getReceiptDisplay6',
        'receipt_display7' => 'getReceiptDisplay7',
        'receipt_display8' => 'getReceiptDisplay8',
        'receipt_display9' => 'getReceiptDisplay9',
        'receipt_display10' => 'getReceiptDisplay10'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('register_display1', $data ?? [], null);
        $this->setIfExists('register_display2', $data ?? [], null);
        $this->setIfExists('register_display3', $data ?? [], null);
        $this->setIfExists('register_display4', $data ?? [], null);
        $this->setIfExists('register_display5', $data ?? [], null);
        $this->setIfExists('register_display6', $data ?? [], null);
        $this->setIfExists('register_display7', $data ?? [], null);
        $this->setIfExists('register_display8', $data ?? [], null);
        $this->setIfExists('receipt_display1', $data ?? [], null);
        $this->setIfExists('receipt_display2', $data ?? [], null);
        $this->setIfExists('receipt_display3', $data ?? [], null);
        $this->setIfExists('receipt_display4', $data ?? [], null);
        $this->setIfExists('receipt_display5', $data ?? [], null);
        $this->setIfExists('receipt_display6', $data ?? [], null);
        $this->setIfExists('receipt_display7', $data ?? [], null);
        $this->setIfExists('receipt_display8', $data ?? [], null);
        $this->setIfExists('receipt_display9', $data ?? [], null);
        $this->setIfExists('receipt_display10', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['register_display1']) && (mb_strlen($this->container['register_display1']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display1', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display2']) && (mb_strlen($this->container['register_display2']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display2', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display3']) && (mb_strlen($this->container['register_display3']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display3', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display4']) && (mb_strlen($this->container['register_display4']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display4', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display5']) && (mb_strlen($this->container['register_display5']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display5', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display6']) && (mb_strlen($this->container['register_display6']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display6', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display7']) && (mb_strlen($this->container['register_display7']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display7', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['register_display8']) && (mb_strlen($this->container['register_display8']) > 32)) {
            $invalidProperties[] = "invalid value for 'register_display8', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['receipt_display1']) && (mb_strlen($this->container['receipt_display1']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display1', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display2']) && (mb_strlen($this->container['receipt_display2']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display2', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display3']) && (mb_strlen($this->container['receipt_display3']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display3', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display4']) && (mb_strlen($this->container['receipt_display4']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display4', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display5']) && (mb_strlen($this->container['receipt_display5']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display5', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display6']) && (mb_strlen($this->container['receipt_display6']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display6', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display7']) && (mb_strlen($this->container['receipt_display7']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display7', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display8']) && (mb_strlen($this->container['receipt_display8']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display8', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display9']) && (mb_strlen($this->container['receipt_display9']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display9', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['receipt_display10']) && (mb_strlen($this->container['receipt_display10']) > 60)) {
            $invalidProperties[] = "invalid value for 'receipt_display10', the character length must be smaller than or equal to 60.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets register_display1
     *
     * @return string|null
     */
    public function getRegisterDisplay1()
    {
        return $this->container['register_display1'];
    }

    /**
     * Sets register_display1
     *
     * @param string|null $register_display1 POSレジ表示欄1   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay1($register_display1)
    {
        if (is_null($register_display1)) {
            throw new \InvalidArgumentException('non-nullable register_display1 cannot be null');
        }
        if ((mb_strlen($register_display1) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display1 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display1'] = $register_display1;

        return $this;
    }

    /**
     * Gets register_display2
     *
     * @return string|null
     */
    public function getRegisterDisplay2()
    {
        return $this->container['register_display2'];
    }

    /**
     * Sets register_display2
     *
     * @param string|null $register_display2 POSレジ表示欄2   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay2($register_display2)
    {
        if (is_null($register_display2)) {
            throw new \InvalidArgumentException('non-nullable register_display2 cannot be null');
        }
        if ((mb_strlen($register_display2) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display2 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display2'] = $register_display2;

        return $this;
    }

    /**
     * Gets register_display3
     *
     * @return string|null
     */
    public function getRegisterDisplay3()
    {
        return $this->container['register_display3'];
    }

    /**
     * Sets register_display3
     *
     * @param string|null $register_display3 POSレジ表示欄3   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay3($register_display3)
    {
        if (is_null($register_display3)) {
            throw new \InvalidArgumentException('non-nullable register_display3 cannot be null');
        }
        if ((mb_strlen($register_display3) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display3 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display3'] = $register_display3;

        return $this;
    }

    /**
     * Gets register_display4
     *
     * @return string|null
     */
    public function getRegisterDisplay4()
    {
        return $this->container['register_display4'];
    }

    /**
     * Sets register_display4
     *
     * @param string|null $register_display4 POSレジ表示欄4   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay4($register_display4)
    {
        if (is_null($register_display4)) {
            throw new \InvalidArgumentException('non-nullable register_display4 cannot be null');
        }
        if ((mb_strlen($register_display4) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display4 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display4'] = $register_display4;

        return $this;
    }

    /**
     * Gets register_display5
     *
     * @return string|null
     */
    public function getRegisterDisplay5()
    {
        return $this->container['register_display5'];
    }

    /**
     * Sets register_display5
     *
     * @param string|null $register_display5 POSレジ表示欄5   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay5($register_display5)
    {
        if (is_null($register_display5)) {
            throw new \InvalidArgumentException('non-nullable register_display5 cannot be null');
        }
        if ((mb_strlen($register_display5) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display5 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display5'] = $register_display5;

        return $this;
    }

    /**
     * Gets register_display6
     *
     * @return string|null
     */
    public function getRegisterDisplay6()
    {
        return $this->container['register_display6'];
    }

    /**
     * Sets register_display6
     *
     * @param string|null $register_display6 POSレジ表示欄6   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay6($register_display6)
    {
        if (is_null($register_display6)) {
            throw new \InvalidArgumentException('non-nullable register_display6 cannot be null');
        }
        if ((mb_strlen($register_display6) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display6 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display6'] = $register_display6;

        return $this;
    }

    /**
     * Gets register_display7
     *
     * @return string|null
     */
    public function getRegisterDisplay7()
    {
        return $this->container['register_display7'];
    }

    /**
     * Sets register_display7
     *
     * @param string|null $register_display7 POSレジ表示欄7   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay7($register_display7)
    {
        if (is_null($register_display7)) {
            throw new \InvalidArgumentException('non-nullable register_display7 cannot be null');
        }
        if ((mb_strlen($register_display7) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display7 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display7'] = $register_display7;

        return $this;
    }

    /**
     * Gets register_display8
     *
     * @return string|null
     */
    public function getRegisterDisplay8()
    {
        return $this->container['register_display8'];
    }

    /**
     * Sets register_display8
     *
     * @param string|null $register_display8 POSレジ表示欄8   設定できる最大長はUTF-8で48byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setRegisterDisplay8($register_display8)
    {
        if (is_null($register_display8)) {
            throw new \InvalidArgumentException('non-nullable register_display8 cannot be null');
        }
        if ((mb_strlen($register_display8) > 32)) {
            throw new \InvalidArgumentException('invalid length for $register_display8 when calling DisplayInformation., must be smaller than or equal to 32.');
        }

        $this->container['register_display8'] = $register_display8;

        return $this;
    }

    /**
     * Gets receipt_display1
     *
     * @return string|null
     */
    public function getReceiptDisplay1()
    {
        return $this->container['receipt_display1'];
    }

    /**
     * Sets receipt_display1
     *
     * @param string|null $receipt_display1 明細表示欄1   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay1($receipt_display1)
    {
        if (is_null($receipt_display1)) {
            throw new \InvalidArgumentException('non-nullable receipt_display1 cannot be null');
        }
        if ((mb_strlen($receipt_display1) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display1 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display1'] = $receipt_display1;

        return $this;
    }

    /**
     * Gets receipt_display2
     *
     * @return string|null
     */
    public function getReceiptDisplay2()
    {
        return $this->container['receipt_display2'];
    }

    /**
     * Sets receipt_display2
     *
     * @param string|null $receipt_display2 明細表示欄2   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay2($receipt_display2)
    {
        if (is_null($receipt_display2)) {
            throw new \InvalidArgumentException('non-nullable receipt_display2 cannot be null');
        }
        if ((mb_strlen($receipt_display2) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display2 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display2'] = $receipt_display2;

        return $this;
    }

    /**
     * Gets receipt_display3
     *
     * @return string|null
     */
    public function getReceiptDisplay3()
    {
        return $this->container['receipt_display3'];
    }

    /**
     * Sets receipt_display3
     *
     * @param string|null $receipt_display3 明細表示欄3   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay3($receipt_display3)
    {
        if (is_null($receipt_display3)) {
            throw new \InvalidArgumentException('non-nullable receipt_display3 cannot be null');
        }
        if ((mb_strlen($receipt_display3) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display3 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display3'] = $receipt_display3;

        return $this;
    }

    /**
     * Gets receipt_display4
     *
     * @return string|null
     */
    public function getReceiptDisplay4()
    {
        return $this->container['receipt_display4'];
    }

    /**
     * Sets receipt_display4
     *
     * @param string|null $receipt_display4 明細表示欄4   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay4($receipt_display4)
    {
        if (is_null($receipt_display4)) {
            throw new \InvalidArgumentException('non-nullable receipt_display4 cannot be null');
        }
        if ((mb_strlen($receipt_display4) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display4 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display4'] = $receipt_display4;

        return $this;
    }

    /**
     * Gets receipt_display5
     *
     * @return string|null
     */
    public function getReceiptDisplay5()
    {
        return $this->container['receipt_display5'];
    }

    /**
     * Sets receipt_display5
     *
     * @param string|null $receipt_display5 明細表示欄5   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay5($receipt_display5)
    {
        if (is_null($receipt_display5)) {
            throw new \InvalidArgumentException('non-nullable receipt_display5 cannot be null');
        }
        if ((mb_strlen($receipt_display5) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display5 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display5'] = $receipt_display5;

        return $this;
    }

    /**
     * Gets receipt_display6
     *
     * @return string|null
     */
    public function getReceiptDisplay6()
    {
        return $this->container['receipt_display6'];
    }

    /**
     * Sets receipt_display6
     *
     * @param string|null $receipt_display6 明細表示欄6   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay6($receipt_display6)
    {
        if (is_null($receipt_display6)) {
            throw new \InvalidArgumentException('non-nullable receipt_display6 cannot be null');
        }
        if ((mb_strlen($receipt_display6) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display6 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display6'] = $receipt_display6;

        return $this;
    }

    /**
     * Gets receipt_display7
     *
     * @return string|null
     */
    public function getReceiptDisplay7()
    {
        return $this->container['receipt_display7'];
    }

    /**
     * Sets receipt_display7
     *
     * @param string|null $receipt_display7 明細表示欄7   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay7($receipt_display7)
    {
        if (is_null($receipt_display7)) {
            throw new \InvalidArgumentException('non-nullable receipt_display7 cannot be null');
        }
        if ((mb_strlen($receipt_display7) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display7 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display7'] = $receipt_display7;

        return $this;
    }

    /**
     * Gets receipt_display8
     *
     * @return string|null
     */
    public function getReceiptDisplay8()
    {
        return $this->container['receipt_display8'];
    }

    /**
     * Sets receipt_display8
     *
     * @param string|null $receipt_display8 明細表示欄8   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay8($receipt_display8)
    {
        if (is_null($receipt_display8)) {
            throw new \InvalidArgumentException('non-nullable receipt_display8 cannot be null');
        }
        if ((mb_strlen($receipt_display8) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display8 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display8'] = $receipt_display8;

        return $this;
    }

    /**
     * Gets receipt_display9
     *
     * @return string|null
     */
    public function getReceiptDisplay9()
    {
        return $this->container['receipt_display9'];
    }

    /**
     * Sets receipt_display9
     *
     * @param string|null $receipt_display9 明細表示欄9   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay9($receipt_display9)
    {
        if (is_null($receipt_display9)) {
            throw new \InvalidArgumentException('non-nullable receipt_display9 cannot be null');
        }
        if ((mb_strlen($receipt_display9) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display9 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display9'] = $receipt_display9;

        return $this;
    }

    /**
     * Gets receipt_display10
     *
     * @return string|null
     */
    public function getReceiptDisplay10()
    {
        return $this->container['receipt_display10'];
    }

    /**
     * Sets receipt_display10
     *
     * @param string|null $receipt_display10 明細表示欄10   設定できる最大長はUTF-8で90byteです。   全角のみ設定可能です。
     *
     * @return self
     */
    public function setReceiptDisplay10($receipt_display10)
    {
        if (is_null($receipt_display10)) {
            throw new \InvalidArgumentException('non-nullable receipt_display10 cannot be null');
        }
        if ((mb_strlen($receipt_display10) > 60)) {
            throw new \InvalidArgumentException('invalid length for $receipt_display10 when calling DisplayInformation., must be smaller than or equal to 60.');
        }

        $this->container['receipt_display10'] = $receipt_display10;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


