<?php
/**
 * Payer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * Payer Class Doc Comment
 *
 * @category Class
 * @description 購入者情報   決済手段ごとの設定要否や各パラメーターの用途は、詳細は[共通パラメーター対応表](#tag/common-parameters)を参照ください。
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Payer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'name_kana' => 'string',
        'name_alphabet' => 'string',
        'gender' => 'string',
        'date_of_birth' => 'string',
        'email' => 'string',
        'delivery_email' => 'string',
        'phones' => '\OotbTeam\MulPay\Model\Phone[]',
        'account_id' => 'string',
        'ip' => 'string',
        'device_type' => 'string',
        'http_user_agent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'name_kana' => null,
        'name_alphabet' => null,
        'gender' => null,
        'date_of_birth' => null,
        'email' => 'email',
        'delivery_email' => 'email',
        'phones' => null,
        'account_id' => null,
        'ip' => null,
        'device_type' => null,
        'http_user_agent' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'name_kana' => false,
        'name_alphabet' => false,
        'gender' => false,
        'date_of_birth' => false,
        'email' => false,
        'delivery_email' => false,
        'phones' => false,
        'account_id' => false,
        'ip' => false,
        'device_type' => false,
        'http_user_agent' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'name_kana' => 'nameKana',
        'name_alphabet' => 'nameAlphabet',
        'gender' => 'gender',
        'date_of_birth' => 'dateOfBirth',
        'email' => 'email',
        'delivery_email' => 'deliveryEmail',
        'phones' => 'phones',
        'account_id' => 'accountId',
        'ip' => 'ip',
        'device_type' => 'deviceType',
        'http_user_agent' => 'httpUserAgent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'name_kana' => 'setNameKana',
        'name_alphabet' => 'setNameAlphabet',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'email' => 'setEmail',
        'delivery_email' => 'setDeliveryEmail',
        'phones' => 'setPhones',
        'account_id' => 'setAccountId',
        'ip' => 'setIp',
        'device_type' => 'setDeviceType',
        'http_user_agent' => 'setHttpUserAgent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'name_kana' => 'getNameKana',
        'name_alphabet' => 'getNameAlphabet',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'email' => 'getEmail',
        'delivery_email' => 'getDeliveryEmail',
        'phones' => 'getPhones',
        'account_id' => 'getAccountId',
        'ip' => 'getIp',
        'device_type' => 'getDeviceType',
        'http_user_agent' => 'getHttpUserAgent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GENDER_MALE = 'MALE';
    public const GENDER_FEMALE = 'FEMALE';
    public const GENDER_OTHER = 'OTHER';
    public const DEVICE_TYPE_PC_WEB = 'PC_WEB';
    public const DEVICE_TYPE_PC_APP = 'PC_APP';
    public const DEVICE_TYPE_MOBILE_WEB = 'MOBILE_WEB';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderAllowableValues()
    {
        return [
            self::GENDER_MALE,
            self::GENDER_FEMALE,
            self::GENDER_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeviceTypeAllowableValues()
    {
        return [
            self::DEVICE_TYPE_PC_WEB,
            self::DEVICE_TYPE_PC_APP,
            self::DEVICE_TYPE_MOBILE_WEB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_kana', $data ?? [], null);
        $this->setIfExists('name_alphabet', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('delivery_email', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('http_user_agent', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 40)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['name_kana']) && !preg_match("/^[ァ-ヶー　]+$/u", $this->container['name_kana'])) {
            $invalidProperties[] = "invalid value for 'name_kana', must be conform to the pattern /^[ァ-ヶー　]+$/.";
        }

        if (!is_null($this->container['name_alphabet']) && (mb_strlen($this->container['name_alphabet']) > 30)) {
            $invalidProperties[] = "invalid value for 'name_alphabet', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['name_alphabet']) && !preg_match("/^[a-zA-Z0-9 \\x2c-\\x2f]+$/", $this->container['name_alphabet'])) {
            $invalidProperties[] = "invalid value for 'name_alphabet', must be conform to the pattern /^[a-zA-Z0-9 \\x2c-\\x2f]+$/.";
        }

        $allowedValues = $this->getGenderAllowableValues();
        if (!is_null($this->container['gender']) && !in_array($this->container['gender'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'gender', must be one of '%s'",
                $this->container['gender'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 254)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['delivery_email']) && (mb_strlen($this->container['delivery_email']) > 254)) {
            $invalidProperties[] = "invalid value for 'delivery_email', the character length must be smaller than or equal to 254.";
        }

        if (!is_null($this->container['account_id']) && (mb_strlen($this->container['account_id']) > 60)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['account_id']) && !preg_match("/^[a-zA-Z0-9-@_ . ]$/", $this->container['account_id'])) {
            $invalidProperties[] = "invalid value for 'account_id', must be conform to the pattern /^[a-zA-Z0-9-@_ . ]$/.";
        }

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) > 39)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be smaller than or equal to 39.";
        }

        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!is_null($this->container['device_type']) && !in_array($this->container['device_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'device_type', must be one of '%s'",
                $this->container['device_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['http_user_agent']) && (mb_strlen($this->container['http_user_agent']) > 512)) {
            $invalidProperties[] = "invalid value for 'http_user_agent', the character length must be smaller than or equal to 512.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 購入者の氏名(フルネーム)   設定できる最大長はUTF-8で60byteです。
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Payer., must be smaller than or equal to 40.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_kana
     *
     * @return string|null
     */
    public function getNameKana()
    {
        return $this->container['name_kana'];
    }

    /**
     * Sets name_kana
     *
     * @param string|null $name_kana 購入者の氏名(全角カナのみ)   設定できる最大長はUTF-8で60byteです。   #### 決済手段ごとの制限事項   - コンビニ: <span style=\"color: #d41f1c;font-family:Courier,monospace;font-size: 0.9em\">required</span>   - Pay-easy: <span style=\"color: #d41f1c;font-family:Courier,monospace;font-size: 0.9em\">required</span>
     *
     * @return self
     */
    public function setNameKana($name_kana)
    {
        if (is_null($name_kana)) {
            throw new \InvalidArgumentException('non-nullable name_kana cannot be null');
        }

        if ((!preg_match("/^[ァ-ヶー　]+$/u", ObjectSerializer::toString($name_kana)))) {
            throw new \InvalidArgumentException("invalid value for \$name_kana when calling Payer., must conform to the pattern /^[ァ-ヶー　]+$/.");
        }

        $this->container['name_kana'] = $name_kana;

        return $this;
    }

    /**
     * Gets name_alphabet
     *
     * @return string|null
     */
    public function getNameAlphabet()
    {
        return $this->container['name_alphabet'];
    }

    /**
     * Sets name_alphabet
     *
     * @param string|null $name_alphabet 購入者の氏名(英名)
     *
     * @return self
     */
    public function setNameAlphabet($name_alphabet)
    {
        if (is_null($name_alphabet)) {
            throw new \InvalidArgumentException('non-nullable name_alphabet cannot be null');
        }
        if ((mb_strlen($name_alphabet) > 30)) {
            throw new \InvalidArgumentException('invalid length for $name_alphabet when calling Payer., must be smaller than or equal to 30.');
        }
        if ((!preg_match("/^[a-zA-Z0-9 \\x2c-\\x2f]+$/", ObjectSerializer::toString($name_alphabet)))) {
            throw new \InvalidArgumentException("invalid value for \$name_alphabet when calling Payer., must conform to the pattern /^[a-zA-Z0-9 \\x2c-\\x2f]+$/.");
        }

        $this->container['name_alphabet'] = $name_alphabet;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender 購入者の性別
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $allowedValues = $this->getGenderAllowableValues();
        if (!in_array($gender, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'gender', must be one of '%s'",
                    $gender,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string|null $date_of_birth 購入者の誕生日   YYYYMMDD形式
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            throw new \InvalidArgumentException('non-nullable date_of_birth cannot be null');
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 購入者のメールアドレス   [RFC 5322](https://www.rfc-editor.org/rfc/rfc5322)の仕様に沿った形式のみ許可されます。
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Payer., must be smaller than or equal to 254.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets delivery_email
     *
     * @return string|null
     */
    public function getDeliveryEmail()
    {
        return $this->container['delivery_email'];
    }

    /**
     * Sets delivery_email
     *
     * @param string|null $delivery_email 取引内容がWebチケットなどの電子デリバリーの場合、配信先のメールアドレスを設定します。   [RFC 5322](https://www.rfc-editor.org/rfc/rfc5322)の仕様に沿った形式のみ許可されます。
     *
     * @return self
     */
    public function setDeliveryEmail($delivery_email)
    {
        if (is_null($delivery_email)) {
            throw new \InvalidArgumentException('non-nullable delivery_email cannot be null');
        }
        if ((mb_strlen($delivery_email) > 254)) {
            throw new \InvalidArgumentException('invalid length for $delivery_email when calling Payer., must be smaller than or equal to 254.');
        }

        $this->container['delivery_email'] = $delivery_email;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \OotbTeam\MulPay\Model\Phone[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \OotbTeam\MulPay\Model\Phone[]|null $phones 購入者の電話情報一覧
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id 加盟店様サイト上における購入者のアカウントIDなど、一意に識別するためのID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        if ((mb_strlen($account_id) > 60)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling Payer., must be smaller than or equal to 60.');
        }
        if ((!preg_match("/^[a-zA-Z0-9-@_ . ]$/", ObjectSerializer::toString($account_id)))) {
            throw new \InvalidArgumentException("invalid value for \$account_id when calling Payer., must conform to the pattern /^[a-zA-Z0-9-@_ . ]$/.");
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip 購入者の発信元IPアドレス
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            throw new \InvalidArgumentException('non-nullable ip cannot be null');
        }
        if ((mb_strlen($ip) > 39)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling Payer., must be smaller than or equal to 39.');
        }

        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type 購入者のデバイス情報をWeb、アプリから選択   - `PC_WEB`：PC(Web) - `PC_APP`：PC(アプリ) - `MOBILE_WEB`：モバイル(Web)
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            throw new \InvalidArgumentException('non-nullable device_type cannot be null');
        }
        $allowedValues = $this->getDeviceTypeAllowableValues();
        if (!in_array($device_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'device_type', must be one of '%s'",
                    $device_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets http_user_agent
     *
     * @return string|null
     */
    public function getHttpUserAgent()
    {
        return $this->container['http_user_agent'];
    }

    /**
     * Sets http_user_agent
     *
     * @param string|null $http_user_agent 購入者のブラウザのUserAgent   半角英数字記号が設定可能です。
     *
     * @return self
     */
    public function setHttpUserAgent($http_user_agent)
    {
        if (is_null($http_user_agent)) {
            throw new \InvalidArgumentException('non-nullable http_user_agent cannot be null');
        }
        if ((mb_strlen($http_user_agent) > 512)) {
            throw new \InvalidArgumentException('invalid length for $http_user_agent when calling Payer., must be smaller than or equal to 512.');
        }

        $this->container['http_user_agent'] = $http_user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


