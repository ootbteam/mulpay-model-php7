<?php
/**
 * Tds2Data
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * Tds2Data Class Doc Comment
 *
 * @category Class
 * @description 3Dセキュアデータ情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Tds2Data implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tds2Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ch_acc_change' => 'string',
        'ch_acc_date' => 'string',
        'ch_acc_pw_change' => 'string',
        'nb_purchase_account' => 'float',
        'payment_acc_age' => 'string',
        'provision_attempts_day' => 'float',
        'ship_address_usage' => 'string',
        'ship_name_ind' => 'string',
        'suspicious_acc_activity' => 'string',
        'txn_activity_day' => 'float',
        'txn_activity_year' => 'float',
        'three_ds_req_auth_data' => 'string',
        'three_ds_req_auth_method' => 'string',
        'three_ds_req_auth_timestamp' => 'string',
        'delivery_timeframe' => 'string',
        'gift_card_amount' => 'float',
        'gift_card_count' => 'float',
        'gift_card_curr' => 'string',
        'pre_order_date' => 'string',
        'pre_order_purchase_ind' => 'string',
        'reorder_items_ind' => 'string',
        'ship_ind' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ch_acc_change' => null,
        'ch_acc_date' => null,
        'ch_acc_pw_change' => null,
        'nb_purchase_account' => null,
        'payment_acc_age' => null,
        'provision_attempts_day' => null,
        'ship_address_usage' => null,
        'ship_name_ind' => null,
        'suspicious_acc_activity' => null,
        'txn_activity_day' => null,
        'txn_activity_year' => null,
        'three_ds_req_auth_data' => null,
        'three_ds_req_auth_method' => null,
        'three_ds_req_auth_timestamp' => null,
        'delivery_timeframe' => null,
        'gift_card_amount' => null,
        'gift_card_count' => null,
        'gift_card_curr' => null,
        'pre_order_date' => null,
        'pre_order_purchase_ind' => null,
        'reorder_items_ind' => null,
        'ship_ind' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ch_acc_change' => false,
        'ch_acc_date' => false,
        'ch_acc_pw_change' => false,
        'nb_purchase_account' => false,
        'payment_acc_age' => false,
        'provision_attempts_day' => false,
        'ship_address_usage' => false,
        'ship_name_ind' => false,
        'suspicious_acc_activity' => false,
        'txn_activity_day' => false,
        'txn_activity_year' => false,
        'three_ds_req_auth_data' => false,
        'three_ds_req_auth_method' => false,
        'three_ds_req_auth_timestamp' => false,
        'delivery_timeframe' => false,
        'gift_card_amount' => false,
        'gift_card_count' => false,
        'gift_card_curr' => false,
        'pre_order_date' => false,
        'pre_order_purchase_ind' => false,
        'reorder_items_ind' => false,
        'ship_ind' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ch_acc_change' => 'chAccChange',
        'ch_acc_date' => 'chAccDate',
        'ch_acc_pw_change' => 'chAccPwChange',
        'nb_purchase_account' => 'nbPurchaseAccount',
        'payment_acc_age' => 'paymentAccAge',
        'provision_attempts_day' => 'provisionAttemptsDay',
        'ship_address_usage' => 'shipAddressUsage',
        'ship_name_ind' => 'shipNameInd',
        'suspicious_acc_activity' => 'suspiciousAccActivity',
        'txn_activity_day' => 'txnActivityDay',
        'txn_activity_year' => 'txnActivityYear',
        'three_ds_req_auth_data' => 'threeDSReqAuthData',
        'three_ds_req_auth_method' => 'threeDSReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'threeDSReqAuthTimestamp',
        'delivery_timeframe' => 'deliveryTimeframe',
        'gift_card_amount' => 'giftCardAmount',
        'gift_card_count' => 'giftCardCount',
        'gift_card_curr' => 'giftCardCurr',
        'pre_order_date' => 'preOrderDate',
        'pre_order_purchase_ind' => 'preOrderPurchaseInd',
        'reorder_items_ind' => 'reorderItemsInd',
        'ship_ind' => 'shipInd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ch_acc_change' => 'setChAccChange',
        'ch_acc_date' => 'setChAccDate',
        'ch_acc_pw_change' => 'setChAccPwChange',
        'nb_purchase_account' => 'setNbPurchaseAccount',
        'payment_acc_age' => 'setPaymentAccAge',
        'provision_attempts_day' => 'setProvisionAttemptsDay',
        'ship_address_usage' => 'setShipAddressUsage',
        'ship_name_ind' => 'setShipNameInd',
        'suspicious_acc_activity' => 'setSuspiciousAccActivity',
        'txn_activity_day' => 'setTxnActivityDay',
        'txn_activity_year' => 'setTxnActivityYear',
        'three_ds_req_auth_data' => 'setThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'setThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'setThreeDsReqAuthTimestamp',
        'delivery_timeframe' => 'setDeliveryTimeframe',
        'gift_card_amount' => 'setGiftCardAmount',
        'gift_card_count' => 'setGiftCardCount',
        'gift_card_curr' => 'setGiftCardCurr',
        'pre_order_date' => 'setPreOrderDate',
        'pre_order_purchase_ind' => 'setPreOrderPurchaseInd',
        'reorder_items_ind' => 'setReorderItemsInd',
        'ship_ind' => 'setShipInd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ch_acc_change' => 'getChAccChange',
        'ch_acc_date' => 'getChAccDate',
        'ch_acc_pw_change' => 'getChAccPwChange',
        'nb_purchase_account' => 'getNbPurchaseAccount',
        'payment_acc_age' => 'getPaymentAccAge',
        'provision_attempts_day' => 'getProvisionAttemptsDay',
        'ship_address_usage' => 'getShipAddressUsage',
        'ship_name_ind' => 'getShipNameInd',
        'suspicious_acc_activity' => 'getSuspiciousAccActivity',
        'txn_activity_day' => 'getTxnActivityDay',
        'txn_activity_year' => 'getTxnActivityYear',
        'three_ds_req_auth_data' => 'getThreeDsReqAuthData',
        'three_ds_req_auth_method' => 'getThreeDsReqAuthMethod',
        'three_ds_req_auth_timestamp' => 'getThreeDsReqAuthTimestamp',
        'delivery_timeframe' => 'getDeliveryTimeframe',
        'gift_card_amount' => 'getGiftCardAmount',
        'gift_card_count' => 'getGiftCardCount',
        'gift_card_curr' => 'getGiftCardCurr',
        'pre_order_date' => 'getPreOrderDate',
        'pre_order_purchase_ind' => 'getPreOrderPurchaseInd',
        'reorder_items_ind' => 'getReorderItemsInd',
        'ship_ind' => 'getShipInd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ch_acc_change', $data ?? [], null);
        $this->setIfExists('ch_acc_date', $data ?? [], null);
        $this->setIfExists('ch_acc_pw_change', $data ?? [], null);
        $this->setIfExists('nb_purchase_account', $data ?? [], null);
        $this->setIfExists('payment_acc_age', $data ?? [], null);
        $this->setIfExists('provision_attempts_day', $data ?? [], null);
        $this->setIfExists('ship_address_usage', $data ?? [], null);
        $this->setIfExists('ship_name_ind', $data ?? [], null);
        $this->setIfExists('suspicious_acc_activity', $data ?? [], null);
        $this->setIfExists('txn_activity_day', $data ?? [], null);
        $this->setIfExists('txn_activity_year', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_data', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_method', $data ?? [], null);
        $this->setIfExists('three_ds_req_auth_timestamp', $data ?? [], null);
        $this->setIfExists('delivery_timeframe', $data ?? [], null);
        $this->setIfExists('gift_card_amount', $data ?? [], null);
        $this->setIfExists('gift_card_count', $data ?? [], null);
        $this->setIfExists('gift_card_curr', $data ?? [], null);
        $this->setIfExists('pre_order_date', $data ?? [], null);
        $this->setIfExists('pre_order_purchase_ind', $data ?? [], null);
        $this->setIfExists('reorder_items_ind', $data ?? [], null);
        $this->setIfExists('ship_ind', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['nb_purchase_account']) && ($this->container['nb_purchase_account'] > 9999)) {
            $invalidProperties[] = "invalid value for 'nb_purchase_account', must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['provision_attempts_day']) && ($this->container['provision_attempts_day'] > 999)) {
            $invalidProperties[] = "invalid value for 'provision_attempts_day', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['ship_name_ind']) && !preg_match("/^(01|02)$/", $this->container['ship_name_ind'])) {
            $invalidProperties[] = "invalid value for 'ship_name_ind', must be conform to the pattern /^(01|02)$/.";
        }

        if (!is_null($this->container['suspicious_acc_activity']) && !preg_match("/^(01|02)$/", $this->container['suspicious_acc_activity'])) {
            $invalidProperties[] = "invalid value for 'suspicious_acc_activity', must be conform to the pattern /^(01|02)$/.";
        }

        if (!is_null($this->container['txn_activity_day']) && ($this->container['txn_activity_day'] > 999)) {
            $invalidProperties[] = "invalid value for 'txn_activity_day', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['txn_activity_year']) && ($this->container['txn_activity_year'] > 999)) {
            $invalidProperties[] = "invalid value for 'txn_activity_year', must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['three_ds_req_auth_data']) && (mb_strlen($this->container['three_ds_req_auth_data']) > 2048)) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_data', the character length must be smaller than or equal to 2048.";
        }

        if (!is_null($this->container['three_ds_req_auth_method']) && !preg_match("/^(01|02|03|04|05|06)$/", $this->container['three_ds_req_auth_method'])) {
            $invalidProperties[] = "invalid value for 'three_ds_req_auth_method', must be conform to the pattern /^(01|02|03|04|05|06)$/.";
        }

        if (!is_null($this->container['delivery_timeframe']) && !preg_match("/^(01|02|03|04)$/", $this->container['delivery_timeframe'])) {
            $invalidProperties[] = "invalid value for 'delivery_timeframe', must be conform to the pattern /^(01|02|03|04)$/.";
        }

        if (!is_null($this->container['gift_card_amount']) && ($this->container['gift_card_amount'] > 999999999999999)) {
            $invalidProperties[] = "invalid value for 'gift_card_amount', must be smaller than or equal to 999999999999999.";
        }

        if (!is_null($this->container['gift_card_count']) && ($this->container['gift_card_count'] > 99)) {
            $invalidProperties[] = "invalid value for 'gift_card_count', must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['gift_card_curr']) && !preg_match("/^[0-9]{3}$/", $this->container['gift_card_curr'])) {
            $invalidProperties[] = "invalid value for 'gift_card_curr', must be conform to the pattern /^[0-9]{3}$/.";
        }

        if (!is_null($this->container['pre_order_purchase_ind']) && !preg_match("/^(01|02)$/", $this->container['pre_order_purchase_ind'])) {
            $invalidProperties[] = "invalid value for 'pre_order_purchase_ind', must be conform to the pattern /^(01|02)$/.";
        }

        if (!is_null($this->container['reorder_items_ind']) && !preg_match("/^(01|02)$/", $this->container['reorder_items_ind'])) {
            $invalidProperties[] = "invalid value for 'reorder_items_ind', must be conform to the pattern /^(01|02)$/.";
        }

        if (!is_null($this->container['ship_ind']) && !preg_match("/^(01|02|03|04|05|06|07)$/", $this->container['ship_ind'])) {
            $invalidProperties[] = "invalid value for 'ship_ind', must be conform to the pattern /^(01|02|03|04|05|06|07)$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ch_acc_change
     *
     * @return string|null
     */
    public function getChAccChange()
    {
        return $this->container['ch_acc_change'];
    }

    /**
     * Sets ch_acc_change
     *
     * @param string|null $ch_acc_change カード会員情報の最終更新日   YYYYMMDD形式
     *
     * @return self
     */
    public function setChAccChange($ch_acc_change)
    {
        if (is_null($ch_acc_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_change cannot be null');
        }
        $this->container['ch_acc_change'] = $ch_acc_change;

        return $this;
    }

    /**
     * Gets ch_acc_date
     *
     * @return string|null
     */
    public function getChAccDate()
    {
        return $this->container['ch_acc_date'];
    }

    /**
     * Sets ch_acc_date
     *
     * @param string|null $ch_acc_date カード会員の作成日   YYYYMMDD形式
     *
     * @return self
     */
    public function setChAccDate($ch_acc_date)
    {
        if (is_null($ch_acc_date)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_date cannot be null');
        }
        $this->container['ch_acc_date'] = $ch_acc_date;

        return $this;
    }

    /**
     * Gets ch_acc_pw_change
     *
     * @return string|null
     */
    public function getChAccPwChange()
    {
        return $this->container['ch_acc_pw_change'];
    }

    /**
     * Sets ch_acc_pw_change
     *
     * @param string|null $ch_acc_pw_change カード会員のパスワード変更日   YYYYMMDD形式
     *
     * @return self
     */
    public function setChAccPwChange($ch_acc_pw_change)
    {
        if (is_null($ch_acc_pw_change)) {
            throw new \InvalidArgumentException('non-nullable ch_acc_pw_change cannot be null');
        }
        $this->container['ch_acc_pw_change'] = $ch_acc_pw_change;

        return $this;
    }

    /**
     * Gets nb_purchase_account
     *
     * @return float|null
     */
    public function getNbPurchaseAccount()
    {
        return $this->container['nb_purchase_account'];
    }

    /**
     * Sets nb_purchase_account
     *
     * @param float|null $nb_purchase_account 過去6ヶ月間にこのカード会員が購入した回数
     *
     * @return self
     */
    public function setNbPurchaseAccount($nb_purchase_account)
    {
        if (is_null($nb_purchase_account)) {
            throw new \InvalidArgumentException('non-nullable nb_purchase_account cannot be null');
        }

        if (($nb_purchase_account > 9999)) {
            throw new \InvalidArgumentException('invalid value for $nb_purchase_account when calling Tds2Data., must be smaller than or equal to 9999.');
        }

        $this->container['nb_purchase_account'] = $nb_purchase_account;

        return $this;
    }

    /**
     * Gets payment_acc_age
     *
     * @return string|null
     */
    public function getPaymentAccAge()
    {
        return $this->container['payment_acc_age'];
    }

    /**
     * Sets payment_acc_age
     *
     * @param string|null $payment_acc_age カード登録日   カード会員にカード情報が登録された日付を設定します。   YYYYMMDD形式
     *
     * @return self
     */
    public function setPaymentAccAge($payment_acc_age)
    {
        if (is_null($payment_acc_age)) {
            throw new \InvalidArgumentException('non-nullable payment_acc_age cannot be null');
        }
        $this->container['payment_acc_age'] = $payment_acc_age;

        return $this;
    }

    /**
     * Gets provision_attempts_day
     *
     * @return float|null
     */
    public function getProvisionAttemptsDay()
    {
        return $this->container['provision_attempts_day'];
    }

    /**
     * Sets provision_attempts_day
     *
     * @param float|null $provision_attempts_day 過去24時間に行われたカード情報追加の試行回数
     *
     * @return self
     */
    public function setProvisionAttemptsDay($provision_attempts_day)
    {
        if (is_null($provision_attempts_day)) {
            throw new \InvalidArgumentException('non-nullable provision_attempts_day cannot be null');
        }

        if (($provision_attempts_day > 999)) {
            throw new \InvalidArgumentException('invalid value for $provision_attempts_day when calling Tds2Data., must be smaller than or equal to 999.');
        }

        $this->container['provision_attempts_day'] = $provision_attempts_day;

        return $this;
    }

    /**
     * Gets ship_address_usage
     *
     * @return string|null
     */
    public function getShipAddressUsage()
    {
        return $this->container['ship_address_usage'];
    }

    /**
     * Sets ship_address_usage
     *
     * @param string|null $ship_address_usage 配送先住所の初回使用日   取引で使用される配送先住所が加盟店様で最初に使用された日付を設定します。   YYYYMMDD形式
     *
     * @return self
     */
    public function setShipAddressUsage($ship_address_usage)
    {
        if (is_null($ship_address_usage)) {
            throw new \InvalidArgumentException('non-nullable ship_address_usage cannot be null');
        }
        $this->container['ship_address_usage'] = $ship_address_usage;

        return $this;
    }

    /**
     * Gets ship_name_ind
     *
     * @return string|null
     */
    public function getShipNameInd()
    {
        return $this->container['ship_name_ind'];
    }

    /**
     * Sets ship_name_ind
     *
     * @param string|null $ship_name_ind カード会員名と配送先名の一致/不一致   カード会員の会員名と取引に使用される配送先名の一致/不一致を設定します。   - `01`: カード会員名と配送先名が一致   - `02`: カード会員名と配送先名が不一致
     *
     * @return self
     */
    public function setShipNameInd($ship_name_ind)
    {
        if (is_null($ship_name_ind)) {
            throw new \InvalidArgumentException('non-nullable ship_name_ind cannot be null');
        }

        if ((!preg_match("/^(01|02)$/", ObjectSerializer::toString($ship_name_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_name_ind when calling Tds2Data., must conform to the pattern /^(01|02)$/.");
        }

        $this->container['ship_name_ind'] = $ship_name_ind;

        return $this;
    }

    /**
     * Gets suspicious_acc_activity
     *
     * @return string|null
     */
    public function getSuspiciousAccActivity()
    {
        return $this->container['suspicious_acc_activity'];
    }

    /**
     * Sets suspicious_acc_activity
     *
     * @param string|null $suspicious_acc_activity カード会員の不審行為情報   カード会員で、不審な行動(過去の不正行為を含む)を加盟店様が発見したかどうかを設定します。   - `01`: 不審な行動は見られなかった   - `02`: 不審な行動が見られた
     *
     * @return self
     */
    public function setSuspiciousAccActivity($suspicious_acc_activity)
    {
        if (is_null($suspicious_acc_activity)) {
            throw new \InvalidArgumentException('non-nullable suspicious_acc_activity cannot be null');
        }

        if ((!preg_match("/^(01|02)$/", ObjectSerializer::toString($suspicious_acc_activity)))) {
            throw new \InvalidArgumentException("invalid value for \$suspicious_acc_activity when calling Tds2Data., must conform to the pattern /^(01|02)$/.");
        }

        $this->container['suspicious_acc_activity'] = $suspicious_acc_activity;

        return $this;
    }

    /**
     * Gets txn_activity_day
     *
     * @return float|null
     */
    public function getTxnActivityDay()
    {
        return $this->container['txn_activity_day'];
    }

    /**
     * Sets txn_activity_day
     *
     * @param float|null $txn_activity_day 過去24時間の取引回数   過去24時間に行われた、カード会員と加盟店様との取引の回数を設定します。
     *
     * @return self
     */
    public function setTxnActivityDay($txn_activity_day)
    {
        if (is_null($txn_activity_day)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_day cannot be null');
        }

        if (($txn_activity_day > 999)) {
            throw new \InvalidArgumentException('invalid value for $txn_activity_day when calling Tds2Data., must be smaller than or equal to 999.');
        }

        $this->container['txn_activity_day'] = $txn_activity_day;

        return $this;
    }

    /**
     * Gets txn_activity_year
     *
     * @return float|null
     */
    public function getTxnActivityYear()
    {
        return $this->container['txn_activity_year'];
    }

    /**
     * Sets txn_activity_year
     *
     * @param float|null $txn_activity_year 前年の取引回数   前年に行われた、カード会員と加盟店様との取引の回数を設定します。
     *
     * @return self
     */
    public function setTxnActivityYear($txn_activity_year)
    {
        if (is_null($txn_activity_year)) {
            throw new \InvalidArgumentException('non-nullable txn_activity_year cannot be null');
        }

        if (($txn_activity_year > 999)) {
            throw new \InvalidArgumentException('invalid value for $txn_activity_year when calling Tds2Data., must be smaller than or equal to 999.');
        }

        $this->container['txn_activity_year'] = $txn_activity_year;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_data
     *
     * @return string|null
     */
    public function getThreeDsReqAuthData()
    {
        return $this->container['three_ds_req_auth_data'];
    }

    /**
     * Sets three_ds_req_auth_data
     *
     * @param string|null $three_ds_req_auth_data ログイン証跡   カード会員が特定の方法でログインしたことを裏付けるデータを設定します。   設定できる最大長はUTF-8で2048byteです。
     *
     * @return self
     */
    public function setThreeDsReqAuthData($three_ds_req_auth_data)
    {
        if (is_null($three_ds_req_auth_data)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_data cannot be null');
        }
        if ((mb_strlen($three_ds_req_auth_data) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $three_ds_req_auth_data when calling Tds2Data., must be smaller than or equal to 2048.');
        }

        $this->container['three_ds_req_auth_data'] = $three_ds_req_auth_data;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_method
     *
     * @return string|null
     */
    public function getThreeDsReqAuthMethod()
    {
        return $this->container['three_ds_req_auth_method'];
    }

    /**
     * Sets three_ds_req_auth_method
     *
     * @param string|null $three_ds_req_auth_method ログイン方法   カード会員の加盟店様システムへのログイン方法を設定します。   - `01`: 認証なし(ゲストとしてログイン)   - `02`: 加盟店様自身の認証情報   - `03`: SSO(シングルサインオン)   - `04`: イシュアーの認証情報   - `05`: サードパーティ認証   - `06`: FIDO認証
     *
     * @return self
     */
    public function setThreeDsReqAuthMethod($three_ds_req_auth_method)
    {
        if (is_null($three_ds_req_auth_method)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_method cannot be null');
        }

        if ((!preg_match("/^(01|02|03|04|05|06)$/", ObjectSerializer::toString($three_ds_req_auth_method)))) {
            throw new \InvalidArgumentException("invalid value for \$three_ds_req_auth_method when calling Tds2Data., must conform to the pattern /^(01|02|03|04|05|06)$/.");
        }

        $this->container['three_ds_req_auth_method'] = $three_ds_req_auth_method;

        return $this;
    }

    /**
     * Gets three_ds_req_auth_timestamp
     *
     * @return string|null
     */
    public function getThreeDsReqAuthTimestamp()
    {
        return $this->container['three_ds_req_auth_timestamp'];
    }

    /**
     * Sets three_ds_req_auth_timestamp
     *
     * @param string|null $three_ds_req_auth_timestamp ログイン日時   カード会員のログイン日時を設定します。   YYYYMMDDHHMM形式
     *
     * @return self
     */
    public function setThreeDsReqAuthTimestamp($three_ds_req_auth_timestamp)
    {
        if (is_null($three_ds_req_auth_timestamp)) {
            throw new \InvalidArgumentException('non-nullable three_ds_req_auth_timestamp cannot be null');
        }
        $this->container['three_ds_req_auth_timestamp'] = $three_ds_req_auth_timestamp;

        return $this;
    }

    /**
     * Gets delivery_timeframe
     *
     * @return string|null
     */
    public function getDeliveryTimeframe()
    {
        return $this->container['delivery_timeframe'];
    }

    /**
     * Sets delivery_timeframe
     *
     * @param string|null $delivery_timeframe 商品納品時間枠   - `01`: 電子デリバリー   - `02`: 当日出荷   - `03`: 翌日出荷   - `04`: 2日目以降の出荷
     *
     * @return self
     */
    public function setDeliveryTimeframe($delivery_timeframe)
    {
        if (is_null($delivery_timeframe)) {
            throw new \InvalidArgumentException('non-nullable delivery_timeframe cannot be null');
        }

        if ((!preg_match("/^(01|02|03|04)$/", ObjectSerializer::toString($delivery_timeframe)))) {
            throw new \InvalidArgumentException("invalid value for \$delivery_timeframe when calling Tds2Data., must conform to the pattern /^(01|02|03|04)$/.");
        }

        $this->container['delivery_timeframe'] = $delivery_timeframe;

        return $this;
    }

    /**
     * Gets gift_card_amount
     *
     * @return float|null
     */
    public function getGiftCardAmount()
    {
        return $this->container['gift_card_amount'];
    }

    /**
     * Sets gift_card_amount
     *
     * @param float|null $gift_card_amount プリペイドカードまたはギフトカードを購入の場合、総購入金額の値を設定します。
     *
     * @return self
     */
    public function setGiftCardAmount($gift_card_amount)
    {
        if (is_null($gift_card_amount)) {
            throw new \InvalidArgumentException('non-nullable gift_card_amount cannot be null');
        }

        if (($gift_card_amount > 999999999999999)) {
            throw new \InvalidArgumentException('invalid value for $gift_card_amount when calling Tds2Data., must be smaller than or equal to 999999999999999.');
        }

        $this->container['gift_card_amount'] = $gift_card_amount;

        return $this;
    }

    /**
     * Gets gift_card_count
     *
     * @return float|null
     */
    public function getGiftCardCount()
    {
        return $this->container['gift_card_count'];
    }

    /**
     * Sets gift_card_count
     *
     * @param float|null $gift_card_count プリペイドカードまたはギフトカードを購入の場合、購入された総数を設定します。
     *
     * @return self
     */
    public function setGiftCardCount($gift_card_count)
    {
        if (is_null($gift_card_count)) {
            throw new \InvalidArgumentException('non-nullable gift_card_count cannot be null');
        }

        if (($gift_card_count > 99)) {
            throw new \InvalidArgumentException('invalid value for $gift_card_count when calling Tds2Data., must be smaller than or equal to 99.');
        }

        $this->container['gift_card_count'] = $gift_card_count;

        return $this;
    }

    /**
     * Gets gift_card_curr
     *
     * @return string|null
     */
    public function getGiftCardCurr()
    {
        return $this->container['gift_card_curr'];
    }

    /**
     * Sets gift_card_curr
     *
     * @param string|null $gift_card_curr 購入されたプリペイドカードまたはギフトカードの通貨コード   プリペイドカードまたはギフトカードを購入の場合、カードの通貨を表す、ISO 4217で定義されている通貨コードを設定します。   ※以下のコードは対象外です。   955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 999
     *
     * @return self
     */
    public function setGiftCardCurr($gift_card_curr)
    {
        if (is_null($gift_card_curr)) {
            throw new \InvalidArgumentException('non-nullable gift_card_curr cannot be null');
        }

        if ((!preg_match("/^[0-9]{3}$/", ObjectSerializer::toString($gift_card_curr)))) {
            throw new \InvalidArgumentException("invalid value for \$gift_card_curr when calling Tds2Data., must conform to the pattern /^[0-9]{3}$/.");
        }

        $this->container['gift_card_curr'] = $gift_card_curr;

        return $this;
    }

    /**
     * Gets pre_order_date
     *
     * @return string|null
     */
    public function getPreOrderDate()
    {
        return $this->container['pre_order_date'];
    }

    /**
     * Sets pre_order_date
     *
     * @param string|null $pre_order_date 商品の発売予定日   先行予約購入の場合は、商品の発売予定日を設定します。   YYYYMMDD形式
     *
     * @return self
     */
    public function setPreOrderDate($pre_order_date)
    {
        if (is_null($pre_order_date)) {
            throw new \InvalidArgumentException('non-nullable pre_order_date cannot be null');
        }
        $this->container['pre_order_date'] = $pre_order_date;

        return $this;
    }

    /**
     * Gets pre_order_purchase_ind
     *
     * @return string|null
     */
    public function getPreOrderPurchaseInd()
    {
        return $this->container['pre_order_purchase_ind'];
    }

    /**
     * Sets pre_order_purchase_ind
     *
     * @param string|null $pre_order_purchase_ind 商品の販売時期情報   先行予約購入か、発売済み商品の購入かを設定します。   - `01`: 発売済み商品   - `02`: 先行予約商品
     *
     * @return self
     */
    public function setPreOrderPurchaseInd($pre_order_purchase_ind)
    {
        if (is_null($pre_order_purchase_ind)) {
            throw new \InvalidArgumentException('non-nullable pre_order_purchase_ind cannot be null');
        }

        if ((!preg_match("/^(01|02)$/", ObjectSerializer::toString($pre_order_purchase_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$pre_order_purchase_ind when calling Tds2Data., must conform to the pattern /^(01|02)$/.");
        }

        $this->container['pre_order_purchase_ind'] = $pre_order_purchase_ind;

        return $this;
    }

    /**
     * Gets reorder_items_ind
     *
     * @return string|null
     */
    public function getReorderItemsInd()
    {
        return $this->container['reorder_items_ind'];
    }

    /**
     * Sets reorder_items_ind
     *
     * @param string|null $reorder_items_ind 商品の注文情報   カード会員が以前購入した商品を再び注文しているかどうかを設定します。   - `01`: 初回注文   - `02`: 再注文
     *
     * @return self
     */
    public function setReorderItemsInd($reorder_items_ind)
    {
        if (is_null($reorder_items_ind)) {
            throw new \InvalidArgumentException('non-nullable reorder_items_ind cannot be null');
        }

        if ((!preg_match("/^(01|02)$/", ObjectSerializer::toString($reorder_items_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$reorder_items_ind when calling Tds2Data., must conform to the pattern /^(01|02)$/.");
        }

        $this->container['reorder_items_ind'] = $reorder_items_ind;

        return $this;
    }

    /**
     * Gets ship_ind
     *
     * @return string|null
     */
    public function getShipInd()
    {
        return $this->container['ship_ind'];
    }

    /**
     * Sets ship_ind
     *
     * @param string|null $ship_ind 取引の配送方法   - `01`: カード会員の請求先住所に配送する   - `02`: 加盟店様が保持している別の、確認済み住所に配送する   - `03`: カード会員の請求先住所と異なる住所に配送する   - `04`: 店舗へ配送 / 近所の店舗での受け取り(店舗の住所は配送先住所で設定する)   - `05`: デジタル商品(オンラインサービス、電子ギフトカードおよび償還コードを含む)   - `06`: 配送なし(旅行およびイベントのチケット)   - `07`: その他(ゲーム、配送されないデジタルサービス、電子メディアの購読料など)
     *
     * @return self
     */
    public function setShipInd($ship_ind)
    {
        if (is_null($ship_ind)) {
            throw new \InvalidArgumentException('non-nullable ship_ind cannot be null');
        }

        if ((!preg_match("/^(01|02|03|04|05|06|07)$/", ObjectSerializer::toString($ship_ind)))) {
            throw new \InvalidArgumentException("invalid value for \$ship_ind when calling Tds2Data., must conform to the pattern /^(01|02|03|04|05|06|07)$/.");
        }

        $this->container['ship_ind'] = $ship_ind;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


