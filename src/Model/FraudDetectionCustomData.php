<?php
/**
 * FraudDetectionCustomData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * FraudDetectionCustomData Class Doc Comment
 *
 * @category Class
 * @description 不正検知カスタム情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FraudDetectionCustomData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FraudDetectionCustomData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'custom_data1' => 'string',
        'custom_data2' => 'string',
        'custom_data3' => 'string',
        'custom_data4' => 'string',
        'custom_data5' => 'string',
        'custom_data6' => 'string',
        'custom_data7' => 'string',
        'custom_data8' => 'string',
        'custom_data9' => 'string',
        'custom_data10' => 'string',
        'custom_data11' => 'string',
        'custom_data12' => 'string',
        'custom_data13' => 'string',
        'custom_data14' => 'string',
        'custom_data15' => 'bool',
        'custom_data16' => 'string',
        'custom_data17' => 'string',
        'custom_data18' => 'string',
        'custom_data19' => 'string',
        'custom_data20' => 'string',
        'custom_data21' => 'string',
        'custom_data22' => 'string',
        'custom_data23' => 'string',
        'custom_data24' => 'string',
        'custom_data25' => 'string',
        'custom_data26' => 'string',
        'custom_data27' => 'string',
        'custom_data28' => 'string',
        'custom_data29' => 'string',
        'custom_data30' => 'string',
        'custom_data31' => 'string',
        'custom_data32' => 'string',
        'custom_data33' => 'string',
        'custom_data34' => 'string',
        'custom_data35' => 'string',
        'custom_data36' => 'string',
        'custom_data37' => 'string',
        'custom_data38' => 'string',
        'custom_data39' => 'string',
        'custom_data40' => 'string',
        'custom_data41' => 'string',
        'custom_data42' => 'string',
        'custom_data43' => 'string',
        'custom_data44' => 'string',
        'custom_data45' => 'string',
        'custom_data46' => 'string',
        'custom_data47' => 'string',
        'custom_data48' => 'string',
        'custom_data49' => 'string',
        'custom_data50' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'custom_data1' => null,
        'custom_data2' => null,
        'custom_data3' => null,
        'custom_data4' => null,
        'custom_data5' => null,
        'custom_data6' => null,
        'custom_data7' => null,
        'custom_data8' => null,
        'custom_data9' => null,
        'custom_data10' => null,
        'custom_data11' => null,
        'custom_data12' => null,
        'custom_data13' => null,
        'custom_data14' => null,
        'custom_data15' => null,
        'custom_data16' => null,
        'custom_data17' => null,
        'custom_data18' => null,
        'custom_data19' => null,
        'custom_data20' => null,
        'custom_data21' => null,
        'custom_data22' => null,
        'custom_data23' => null,
        'custom_data24' => null,
        'custom_data25' => null,
        'custom_data26' => null,
        'custom_data27' => null,
        'custom_data28' => null,
        'custom_data29' => null,
        'custom_data30' => null,
        'custom_data31' => null,
        'custom_data32' => null,
        'custom_data33' => null,
        'custom_data34' => null,
        'custom_data35' => null,
        'custom_data36' => null,
        'custom_data37' => null,
        'custom_data38' => null,
        'custom_data39' => null,
        'custom_data40' => null,
        'custom_data41' => null,
        'custom_data42' => null,
        'custom_data43' => null,
        'custom_data44' => null,
        'custom_data45' => null,
        'custom_data46' => null,
        'custom_data47' => null,
        'custom_data48' => null,
        'custom_data49' => null,
        'custom_data50' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'custom_data1' => false,
        'custom_data2' => false,
        'custom_data3' => false,
        'custom_data4' => false,
        'custom_data5' => false,
        'custom_data6' => false,
        'custom_data7' => false,
        'custom_data8' => false,
        'custom_data9' => false,
        'custom_data10' => false,
        'custom_data11' => false,
        'custom_data12' => false,
        'custom_data13' => false,
        'custom_data14' => false,
        'custom_data15' => false,
        'custom_data16' => false,
        'custom_data17' => false,
        'custom_data18' => false,
        'custom_data19' => false,
        'custom_data20' => false,
        'custom_data21' => false,
        'custom_data22' => false,
        'custom_data23' => false,
        'custom_data24' => false,
        'custom_data25' => false,
        'custom_data26' => false,
        'custom_data27' => false,
        'custom_data28' => false,
        'custom_data29' => false,
        'custom_data30' => false,
        'custom_data31' => false,
        'custom_data32' => false,
        'custom_data33' => false,
        'custom_data34' => false,
        'custom_data35' => false,
        'custom_data36' => false,
        'custom_data37' => false,
        'custom_data38' => false,
        'custom_data39' => false,
        'custom_data40' => false,
        'custom_data41' => false,
        'custom_data42' => false,
        'custom_data43' => false,
        'custom_data44' => false,
        'custom_data45' => false,
        'custom_data46' => false,
        'custom_data47' => false,
        'custom_data48' => false,
        'custom_data49' => false,
        'custom_data50' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_data1' => 'customData1',
        'custom_data2' => 'customData2',
        'custom_data3' => 'customData3',
        'custom_data4' => 'customData4',
        'custom_data5' => 'customData5',
        'custom_data6' => 'customData6',
        'custom_data7' => 'customData7',
        'custom_data8' => 'customData8',
        'custom_data9' => 'customData9',
        'custom_data10' => 'customData10',
        'custom_data11' => 'customData11',
        'custom_data12' => 'customData12',
        'custom_data13' => 'customData13',
        'custom_data14' => 'customData14',
        'custom_data15' => 'customData15',
        'custom_data16' => 'customData16',
        'custom_data17' => 'customData17',
        'custom_data18' => 'customData18',
        'custom_data19' => 'customData19',
        'custom_data20' => 'customData20',
        'custom_data21' => 'customData21',
        'custom_data22' => 'customData22',
        'custom_data23' => 'customData23',
        'custom_data24' => 'customData24',
        'custom_data25' => 'customData25',
        'custom_data26' => 'customData26',
        'custom_data27' => 'customData27',
        'custom_data28' => 'customData28',
        'custom_data29' => 'customData29',
        'custom_data30' => 'customData30',
        'custom_data31' => 'customData31',
        'custom_data32' => 'customData32',
        'custom_data33' => 'customData33',
        'custom_data34' => 'customData34',
        'custom_data35' => 'customData35',
        'custom_data36' => 'customData36',
        'custom_data37' => 'customData37',
        'custom_data38' => 'customData38',
        'custom_data39' => 'customData39',
        'custom_data40' => 'customData40',
        'custom_data41' => 'customData41',
        'custom_data42' => 'customData42',
        'custom_data43' => 'customData43',
        'custom_data44' => 'customData44',
        'custom_data45' => 'customData45',
        'custom_data46' => 'customData46',
        'custom_data47' => 'customData47',
        'custom_data48' => 'customData48',
        'custom_data49' => 'customData49',
        'custom_data50' => 'customData50'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_data1' => 'setCustomData1',
        'custom_data2' => 'setCustomData2',
        'custom_data3' => 'setCustomData3',
        'custom_data4' => 'setCustomData4',
        'custom_data5' => 'setCustomData5',
        'custom_data6' => 'setCustomData6',
        'custom_data7' => 'setCustomData7',
        'custom_data8' => 'setCustomData8',
        'custom_data9' => 'setCustomData9',
        'custom_data10' => 'setCustomData10',
        'custom_data11' => 'setCustomData11',
        'custom_data12' => 'setCustomData12',
        'custom_data13' => 'setCustomData13',
        'custom_data14' => 'setCustomData14',
        'custom_data15' => 'setCustomData15',
        'custom_data16' => 'setCustomData16',
        'custom_data17' => 'setCustomData17',
        'custom_data18' => 'setCustomData18',
        'custom_data19' => 'setCustomData19',
        'custom_data20' => 'setCustomData20',
        'custom_data21' => 'setCustomData21',
        'custom_data22' => 'setCustomData22',
        'custom_data23' => 'setCustomData23',
        'custom_data24' => 'setCustomData24',
        'custom_data25' => 'setCustomData25',
        'custom_data26' => 'setCustomData26',
        'custom_data27' => 'setCustomData27',
        'custom_data28' => 'setCustomData28',
        'custom_data29' => 'setCustomData29',
        'custom_data30' => 'setCustomData30',
        'custom_data31' => 'setCustomData31',
        'custom_data32' => 'setCustomData32',
        'custom_data33' => 'setCustomData33',
        'custom_data34' => 'setCustomData34',
        'custom_data35' => 'setCustomData35',
        'custom_data36' => 'setCustomData36',
        'custom_data37' => 'setCustomData37',
        'custom_data38' => 'setCustomData38',
        'custom_data39' => 'setCustomData39',
        'custom_data40' => 'setCustomData40',
        'custom_data41' => 'setCustomData41',
        'custom_data42' => 'setCustomData42',
        'custom_data43' => 'setCustomData43',
        'custom_data44' => 'setCustomData44',
        'custom_data45' => 'setCustomData45',
        'custom_data46' => 'setCustomData46',
        'custom_data47' => 'setCustomData47',
        'custom_data48' => 'setCustomData48',
        'custom_data49' => 'setCustomData49',
        'custom_data50' => 'setCustomData50'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_data1' => 'getCustomData1',
        'custom_data2' => 'getCustomData2',
        'custom_data3' => 'getCustomData3',
        'custom_data4' => 'getCustomData4',
        'custom_data5' => 'getCustomData5',
        'custom_data6' => 'getCustomData6',
        'custom_data7' => 'getCustomData7',
        'custom_data8' => 'getCustomData8',
        'custom_data9' => 'getCustomData9',
        'custom_data10' => 'getCustomData10',
        'custom_data11' => 'getCustomData11',
        'custom_data12' => 'getCustomData12',
        'custom_data13' => 'getCustomData13',
        'custom_data14' => 'getCustomData14',
        'custom_data15' => 'getCustomData15',
        'custom_data16' => 'getCustomData16',
        'custom_data17' => 'getCustomData17',
        'custom_data18' => 'getCustomData18',
        'custom_data19' => 'getCustomData19',
        'custom_data20' => 'getCustomData20',
        'custom_data21' => 'getCustomData21',
        'custom_data22' => 'getCustomData22',
        'custom_data23' => 'getCustomData23',
        'custom_data24' => 'getCustomData24',
        'custom_data25' => 'getCustomData25',
        'custom_data26' => 'getCustomData26',
        'custom_data27' => 'getCustomData27',
        'custom_data28' => 'getCustomData28',
        'custom_data29' => 'getCustomData29',
        'custom_data30' => 'getCustomData30',
        'custom_data31' => 'getCustomData31',
        'custom_data32' => 'getCustomData32',
        'custom_data33' => 'getCustomData33',
        'custom_data34' => 'getCustomData34',
        'custom_data35' => 'getCustomData35',
        'custom_data36' => 'getCustomData36',
        'custom_data37' => 'getCustomData37',
        'custom_data38' => 'getCustomData38',
        'custom_data39' => 'getCustomData39',
        'custom_data40' => 'getCustomData40',
        'custom_data41' => 'getCustomData41',
        'custom_data42' => 'getCustomData42',
        'custom_data43' => 'getCustomData43',
        'custom_data44' => 'getCustomData44',
        'custom_data45' => 'getCustomData45',
        'custom_data46' => 'getCustomData46',
        'custom_data47' => 'getCustomData47',
        'custom_data48' => 'getCustomData48',
        'custom_data49' => 'getCustomData49',
        'custom_data50' => 'getCustomData50'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('custom_data1', $data ?? [], null);
        $this->setIfExists('custom_data2', $data ?? [], null);
        $this->setIfExists('custom_data3', $data ?? [], null);
        $this->setIfExists('custom_data4', $data ?? [], null);
        $this->setIfExists('custom_data5', $data ?? [], null);
        $this->setIfExists('custom_data6', $data ?? [], null);
        $this->setIfExists('custom_data7', $data ?? [], null);
        $this->setIfExists('custom_data8', $data ?? [], null);
        $this->setIfExists('custom_data9', $data ?? [], null);
        $this->setIfExists('custom_data10', $data ?? [], null);
        $this->setIfExists('custom_data11', $data ?? [], null);
        $this->setIfExists('custom_data12', $data ?? [], null);
        $this->setIfExists('custom_data13', $data ?? [], null);
        $this->setIfExists('custom_data14', $data ?? [], null);
        $this->setIfExists('custom_data15', $data ?? [], null);
        $this->setIfExists('custom_data16', $data ?? [], null);
        $this->setIfExists('custom_data17', $data ?? [], null);
        $this->setIfExists('custom_data18', $data ?? [], null);
        $this->setIfExists('custom_data19', $data ?? [], null);
        $this->setIfExists('custom_data20', $data ?? [], null);
        $this->setIfExists('custom_data21', $data ?? [], null);
        $this->setIfExists('custom_data22', $data ?? [], null);
        $this->setIfExists('custom_data23', $data ?? [], null);
        $this->setIfExists('custom_data24', $data ?? [], null);
        $this->setIfExists('custom_data25', $data ?? [], null);
        $this->setIfExists('custom_data26', $data ?? [], null);
        $this->setIfExists('custom_data27', $data ?? [], null);
        $this->setIfExists('custom_data28', $data ?? [], null);
        $this->setIfExists('custom_data29', $data ?? [], null);
        $this->setIfExists('custom_data30', $data ?? [], null);
        $this->setIfExists('custom_data31', $data ?? [], null);
        $this->setIfExists('custom_data32', $data ?? [], null);
        $this->setIfExists('custom_data33', $data ?? [], null);
        $this->setIfExists('custom_data34', $data ?? [], null);
        $this->setIfExists('custom_data35', $data ?? [], null);
        $this->setIfExists('custom_data36', $data ?? [], null);
        $this->setIfExists('custom_data37', $data ?? [], null);
        $this->setIfExists('custom_data38', $data ?? [], null);
        $this->setIfExists('custom_data39', $data ?? [], null);
        $this->setIfExists('custom_data40', $data ?? [], null);
        $this->setIfExists('custom_data41', $data ?? [], null);
        $this->setIfExists('custom_data42', $data ?? [], null);
        $this->setIfExists('custom_data43', $data ?? [], null);
        $this->setIfExists('custom_data44', $data ?? [], null);
        $this->setIfExists('custom_data45', $data ?? [], null);
        $this->setIfExists('custom_data46', $data ?? [], null);
        $this->setIfExists('custom_data47', $data ?? [], null);
        $this->setIfExists('custom_data48', $data ?? [], null);
        $this->setIfExists('custom_data49', $data ?? [], null);
        $this->setIfExists('custom_data50', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['custom_data1']) && (mb_strlen($this->container['custom_data1']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data1', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data2']) && (mb_strlen($this->container['custom_data2']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data3']) && (mb_strlen($this->container['custom_data3']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data3', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data4']) && (mb_strlen($this->container['custom_data4']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data4', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data5']) && (mb_strlen($this->container['custom_data5']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data5', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data6']) && (mb_strlen($this->container['custom_data6']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data6', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data7']) && (mb_strlen($this->container['custom_data7']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data7', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data8']) && (mb_strlen($this->container['custom_data8']) > 256)) {
            $invalidProperties[] = "invalid value for 'custom_data8', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['custom_data9']) && (mb_strlen($this->container['custom_data9']) > 256)) {
            $invalidProperties[] = "invalid value for 'custom_data9', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['custom_data10']) && (mb_strlen($this->container['custom_data10']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data10', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data11']) && (mb_strlen($this->container['custom_data11']) > 9)) {
            $invalidProperties[] = "invalid value for 'custom_data11', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['custom_data11']) && !preg_match("/^[0-9]+$/", $this->container['custom_data11'])) {
            $invalidProperties[] = "invalid value for 'custom_data11', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['custom_data12']) && (mb_strlen($this->container['custom_data12']) > 9)) {
            $invalidProperties[] = "invalid value for 'custom_data12', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['custom_data12']) && !preg_match("/^[0-9]+$/", $this->container['custom_data12'])) {
            $invalidProperties[] = "invalid value for 'custom_data12', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['custom_data13']) && (mb_strlen($this->container['custom_data13']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data13', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data14']) && (mb_strlen($this->container['custom_data14']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data14', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data16']) && (mb_strlen($this->container['custom_data16']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data16', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data17']) && (mb_strlen($this->container['custom_data17']) > 9)) {
            $invalidProperties[] = "invalid value for 'custom_data17', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['custom_data17']) && !preg_match("/^[0-9]+$/", $this->container['custom_data17'])) {
            $invalidProperties[] = "invalid value for 'custom_data17', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['custom_data18']) && (mb_strlen($this->container['custom_data18']) > 9)) {
            $invalidProperties[] = "invalid value for 'custom_data18', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['custom_data18']) && !preg_match("/^[0-9]+$/", $this->container['custom_data18'])) {
            $invalidProperties[] = "invalid value for 'custom_data18', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['custom_data19']) && (mb_strlen($this->container['custom_data19']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data19', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data20']) && (mb_strlen($this->container['custom_data20']) > 9)) {
            $invalidProperties[] = "invalid value for 'custom_data20', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['custom_data20']) && !preg_match("/^[0-9]+$/", $this->container['custom_data20'])) {
            $invalidProperties[] = "invalid value for 'custom_data20', must be conform to the pattern /^[0-9]+$/.";
        }

        if (!is_null($this->container['custom_data21']) && (mb_strlen($this->container['custom_data21']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data21', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data22']) && (mb_strlen($this->container['custom_data22']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data22', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data23']) && (mb_strlen($this->container['custom_data23']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data23', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data24']) && (mb_strlen($this->container['custom_data24']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data24', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data25']) && (mb_strlen($this->container['custom_data25']) > 30)) {
            $invalidProperties[] = "invalid value for 'custom_data25', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['custom_data26']) && (mb_strlen($this->container['custom_data26']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data26', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data27']) && (mb_strlen($this->container['custom_data27']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data27', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data28']) && (mb_strlen($this->container['custom_data28']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data28', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data29']) && (mb_strlen($this->container['custom_data29']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data29', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data30']) && (mb_strlen($this->container['custom_data30']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data30', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data31']) && (mb_strlen($this->container['custom_data31']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data31', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data32']) && (mb_strlen($this->container['custom_data32']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data32', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data33']) && (mb_strlen($this->container['custom_data33']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data33', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data34']) && (mb_strlen($this->container['custom_data34']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data34', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data35']) && (mb_strlen($this->container['custom_data35']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data35', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data36']) && (mb_strlen($this->container['custom_data36']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data36', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data37']) && (mb_strlen($this->container['custom_data37']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data37', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data38']) && (mb_strlen($this->container['custom_data38']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data38', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data39']) && (mb_strlen($this->container['custom_data39']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data39', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data40']) && (mb_strlen($this->container['custom_data40']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data40', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data41']) && (mb_strlen($this->container['custom_data41']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data41', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data42']) && (mb_strlen($this->container['custom_data42']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data42', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data43']) && (mb_strlen($this->container['custom_data43']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data43', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data44']) && (mb_strlen($this->container['custom_data44']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data44', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data45']) && (mb_strlen($this->container['custom_data45']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data45', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data46']) && (mb_strlen($this->container['custom_data46']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data46', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data47']) && (mb_strlen($this->container['custom_data47']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data47', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data48']) && (mb_strlen($this->container['custom_data48']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data48', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data49']) && (mb_strlen($this->container['custom_data49']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data49', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['custom_data50']) && (mb_strlen($this->container['custom_data50']) > 255)) {
            $invalidProperties[] = "invalid value for 'custom_data50', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_data1
     *
     * @return string|null
     */
    public function getCustomData1()
    {
        return $this->container['custom_data1'];
    }

    /**
     * Sets custom_data1
     *
     * @param string|null $custom_data1 カスタム項目1   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData1($custom_data1)
    {
        if (is_null($custom_data1)) {
            throw new \InvalidArgumentException('non-nullable custom_data1 cannot be null');
        }
        if ((mb_strlen($custom_data1) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data1 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data1'] = $custom_data1;

        return $this;
    }

    /**
     * Gets custom_data2
     *
     * @return string|null
     */
    public function getCustomData2()
    {
        return $this->container['custom_data2'];
    }

    /**
     * Sets custom_data2
     *
     * @param string|null $custom_data2 カスタム項目2   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData2($custom_data2)
    {
        if (is_null($custom_data2)) {
            throw new \InvalidArgumentException('non-nullable custom_data2 cannot be null');
        }
        if ((mb_strlen($custom_data2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data2 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data2'] = $custom_data2;

        return $this;
    }

    /**
     * Gets custom_data3
     *
     * @return string|null
     */
    public function getCustomData3()
    {
        return $this->container['custom_data3'];
    }

    /**
     * Sets custom_data3
     *
     * @param string|null $custom_data3 カスタム項目3   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData3($custom_data3)
    {
        if (is_null($custom_data3)) {
            throw new \InvalidArgumentException('non-nullable custom_data3 cannot be null');
        }
        if ((mb_strlen($custom_data3) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data3 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data3'] = $custom_data3;

        return $this;
    }

    /**
     * Gets custom_data4
     *
     * @return string|null
     */
    public function getCustomData4()
    {
        return $this->container['custom_data4'];
    }

    /**
     * Sets custom_data4
     *
     * @param string|null $custom_data4 カスタム項目4   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData4($custom_data4)
    {
        if (is_null($custom_data4)) {
            throw new \InvalidArgumentException('non-nullable custom_data4 cannot be null');
        }
        if ((mb_strlen($custom_data4) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data4 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data4'] = $custom_data4;

        return $this;
    }

    /**
     * Gets custom_data5
     *
     * @return string|null
     */
    public function getCustomData5()
    {
        return $this->container['custom_data5'];
    }

    /**
     * Sets custom_data5
     *
     * @param string|null $custom_data5 カスタム項目5   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData5($custom_data5)
    {
        if (is_null($custom_data5)) {
            throw new \InvalidArgumentException('non-nullable custom_data5 cannot be null');
        }
        if ((mb_strlen($custom_data5) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data5 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data5'] = $custom_data5;

        return $this;
    }

    /**
     * Gets custom_data6
     *
     * @return string|null
     */
    public function getCustomData6()
    {
        return $this->container['custom_data6'];
    }

    /**
     * Sets custom_data6
     *
     * @param string|null $custom_data6 カスタム項目6   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData6($custom_data6)
    {
        if (is_null($custom_data6)) {
            throw new \InvalidArgumentException('non-nullable custom_data6 cannot be null');
        }
        if ((mb_strlen($custom_data6) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data6 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data6'] = $custom_data6;

        return $this;
    }

    /**
     * Gets custom_data7
     *
     * @return string|null
     */
    public function getCustomData7()
    {
        return $this->container['custom_data7'];
    }

    /**
     * Sets custom_data7
     *
     * @param string|null $custom_data7 カスタム項目7   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData7($custom_data7)
    {
        if (is_null($custom_data7)) {
            throw new \InvalidArgumentException('non-nullable custom_data7 cannot be null');
        }
        if ((mb_strlen($custom_data7) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data7 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data7'] = $custom_data7;

        return $this;
    }

    /**
     * Gets custom_data8
     *
     * @return string|null
     */
    public function getCustomData8()
    {
        return $this->container['custom_data8'];
    }

    /**
     * Sets custom_data8
     *
     * @param string|null $custom_data8 カスタム項目8   設定できる最大長はUTF-8で256byteです。
     *
     * @return self
     */
    public function setCustomData8($custom_data8)
    {
        if (is_null($custom_data8)) {
            throw new \InvalidArgumentException('non-nullable custom_data8 cannot be null');
        }
        if ((mb_strlen($custom_data8) > 256)) {
            throw new \InvalidArgumentException('invalid length for $custom_data8 when calling FraudDetectionCustomData., must be smaller than or equal to 256.');
        }

        $this->container['custom_data8'] = $custom_data8;

        return $this;
    }

    /**
     * Gets custom_data9
     *
     * @return string|null
     */
    public function getCustomData9()
    {
        return $this->container['custom_data9'];
    }

    /**
     * Sets custom_data9
     *
     * @param string|null $custom_data9 カスタム項目9   設定できる最大長はUTF-8で256byteです。
     *
     * @return self
     */
    public function setCustomData9($custom_data9)
    {
        if (is_null($custom_data9)) {
            throw new \InvalidArgumentException('non-nullable custom_data9 cannot be null');
        }
        if ((mb_strlen($custom_data9) > 256)) {
            throw new \InvalidArgumentException('invalid length for $custom_data9 when calling FraudDetectionCustomData., must be smaller than or equal to 256.');
        }

        $this->container['custom_data9'] = $custom_data9;

        return $this;
    }

    /**
     * Gets custom_data10
     *
     * @return string|null
     */
    public function getCustomData10()
    {
        return $this->container['custom_data10'];
    }

    /**
     * Sets custom_data10
     *
     * @param string|null $custom_data10 カスタム項目10   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData10($custom_data10)
    {
        if (is_null($custom_data10)) {
            throw new \InvalidArgumentException('non-nullable custom_data10 cannot be null');
        }
        if ((mb_strlen($custom_data10) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data10 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data10'] = $custom_data10;

        return $this;
    }

    /**
     * Gets custom_data11
     *
     * @return string|null
     */
    public function getCustomData11()
    {
        return $this->container['custom_data11'];
    }

    /**
     * Sets custom_data11
     *
     * @param string|null $custom_data11 カスタム項目11
     *
     * @return self
     */
    public function setCustomData11($custom_data11)
    {
        if (is_null($custom_data11)) {
            throw new \InvalidArgumentException('non-nullable custom_data11 cannot be null');
        }
        if ((mb_strlen($custom_data11) > 9)) {
            throw new \InvalidArgumentException('invalid length for $custom_data11 when calling FraudDetectionCustomData., must be smaller than or equal to 9.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($custom_data11)))) {
            throw new \InvalidArgumentException("invalid value for \$custom_data11 when calling FraudDetectionCustomData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['custom_data11'] = $custom_data11;

        return $this;
    }

    /**
     * Gets custom_data12
     *
     * @return string|null
     */
    public function getCustomData12()
    {
        return $this->container['custom_data12'];
    }

    /**
     * Sets custom_data12
     *
     * @param string|null $custom_data12 カスタム項目12
     *
     * @return self
     */
    public function setCustomData12($custom_data12)
    {
        if (is_null($custom_data12)) {
            throw new \InvalidArgumentException('non-nullable custom_data12 cannot be null');
        }
        if ((mb_strlen($custom_data12) > 9)) {
            throw new \InvalidArgumentException('invalid length for $custom_data12 when calling FraudDetectionCustomData., must be smaller than or equal to 9.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($custom_data12)))) {
            throw new \InvalidArgumentException("invalid value for \$custom_data12 when calling FraudDetectionCustomData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['custom_data12'] = $custom_data12;

        return $this;
    }

    /**
     * Gets custom_data13
     *
     * @return string|null
     */
    public function getCustomData13()
    {
        return $this->container['custom_data13'];
    }

    /**
     * Sets custom_data13
     *
     * @param string|null $custom_data13 カスタム項目13   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData13($custom_data13)
    {
        if (is_null($custom_data13)) {
            throw new \InvalidArgumentException('non-nullable custom_data13 cannot be null');
        }
        if ((mb_strlen($custom_data13) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data13 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data13'] = $custom_data13;

        return $this;
    }

    /**
     * Gets custom_data14
     *
     * @return string|null
     */
    public function getCustomData14()
    {
        return $this->container['custom_data14'];
    }

    /**
     * Sets custom_data14
     *
     * @param string|null $custom_data14 カスタム項目14   <span style=\"color: #d41f1c\">現在未使用</span>
     *
     * @return self
     */
    public function setCustomData14($custom_data14)
    {
        if (is_null($custom_data14)) {
            throw new \InvalidArgumentException('non-nullable custom_data14 cannot be null');
        }
        if ((mb_strlen($custom_data14) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data14 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data14'] = $custom_data14;

        return $this;
    }

    /**
     * Gets custom_data15
     *
     * @return bool|null
     */
    public function getCustomData15()
    {
        return $this->container['custom_data15'];
    }

    /**
     * Sets custom_data15
     *
     * @param bool|null $custom_data15 カスタム項目15
     *
     * @return self
     */
    public function setCustomData15($custom_data15)
    {
        if (is_null($custom_data15)) {
            throw new \InvalidArgumentException('non-nullable custom_data15 cannot be null');
        }
        $this->container['custom_data15'] = $custom_data15;

        return $this;
    }

    /**
     * Gets custom_data16
     *
     * @return string|null
     */
    public function getCustomData16()
    {
        return $this->container['custom_data16'];
    }

    /**
     * Sets custom_data16
     *
     * @param string|null $custom_data16 カスタム項目16   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData16($custom_data16)
    {
        if (is_null($custom_data16)) {
            throw new \InvalidArgumentException('non-nullable custom_data16 cannot be null');
        }
        if ((mb_strlen($custom_data16) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data16 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data16'] = $custom_data16;

        return $this;
    }

    /**
     * Gets custom_data17
     *
     * @return string|null
     */
    public function getCustomData17()
    {
        return $this->container['custom_data17'];
    }

    /**
     * Sets custom_data17
     *
     * @param string|null $custom_data17 カスタム項目17
     *
     * @return self
     */
    public function setCustomData17($custom_data17)
    {
        if (is_null($custom_data17)) {
            throw new \InvalidArgumentException('non-nullable custom_data17 cannot be null');
        }
        if ((mb_strlen($custom_data17) > 9)) {
            throw new \InvalidArgumentException('invalid length for $custom_data17 when calling FraudDetectionCustomData., must be smaller than or equal to 9.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($custom_data17)))) {
            throw new \InvalidArgumentException("invalid value for \$custom_data17 when calling FraudDetectionCustomData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['custom_data17'] = $custom_data17;

        return $this;
    }

    /**
     * Gets custom_data18
     *
     * @return string|null
     */
    public function getCustomData18()
    {
        return $this->container['custom_data18'];
    }

    /**
     * Sets custom_data18
     *
     * @param string|null $custom_data18 カスタム項目18
     *
     * @return self
     */
    public function setCustomData18($custom_data18)
    {
        if (is_null($custom_data18)) {
            throw new \InvalidArgumentException('non-nullable custom_data18 cannot be null');
        }
        if ((mb_strlen($custom_data18) > 9)) {
            throw new \InvalidArgumentException('invalid length for $custom_data18 when calling FraudDetectionCustomData., must be smaller than or equal to 9.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($custom_data18)))) {
            throw new \InvalidArgumentException("invalid value for \$custom_data18 when calling FraudDetectionCustomData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['custom_data18'] = $custom_data18;

        return $this;
    }

    /**
     * Gets custom_data19
     *
     * @return string|null
     */
    public function getCustomData19()
    {
        return $this->container['custom_data19'];
    }

    /**
     * Sets custom_data19
     *
     * @param string|null $custom_data19 カスタム項目19   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData19($custom_data19)
    {
        if (is_null($custom_data19)) {
            throw new \InvalidArgumentException('non-nullable custom_data19 cannot be null');
        }
        if ((mb_strlen($custom_data19) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data19 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data19'] = $custom_data19;

        return $this;
    }

    /**
     * Gets custom_data20
     *
     * @return string|null
     */
    public function getCustomData20()
    {
        return $this->container['custom_data20'];
    }

    /**
     * Sets custom_data20
     *
     * @param string|null $custom_data20 カスタム項目20
     *
     * @return self
     */
    public function setCustomData20($custom_data20)
    {
        if (is_null($custom_data20)) {
            throw new \InvalidArgumentException('non-nullable custom_data20 cannot be null');
        }
        if ((mb_strlen($custom_data20) > 9)) {
            throw new \InvalidArgumentException('invalid length for $custom_data20 when calling FraudDetectionCustomData., must be smaller than or equal to 9.');
        }
        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($custom_data20)))) {
            throw new \InvalidArgumentException("invalid value for \$custom_data20 when calling FraudDetectionCustomData., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['custom_data20'] = $custom_data20;

        return $this;
    }

    /**
     * Gets custom_data21
     *
     * @return string|null
     */
    public function getCustomData21()
    {
        return $this->container['custom_data21'];
    }

    /**
     * Sets custom_data21
     *
     * @param string|null $custom_data21 カスタム項目21   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData21($custom_data21)
    {
        if (is_null($custom_data21)) {
            throw new \InvalidArgumentException('non-nullable custom_data21 cannot be null');
        }
        if ((mb_strlen($custom_data21) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data21 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data21'] = $custom_data21;

        return $this;
    }

    /**
     * Gets custom_data22
     *
     * @return string|null
     */
    public function getCustomData22()
    {
        return $this->container['custom_data22'];
    }

    /**
     * Sets custom_data22
     *
     * @param string|null $custom_data22 カスタム項目22   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData22($custom_data22)
    {
        if (is_null($custom_data22)) {
            throw new \InvalidArgumentException('non-nullable custom_data22 cannot be null');
        }
        if ((mb_strlen($custom_data22) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data22 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data22'] = $custom_data22;

        return $this;
    }

    /**
     * Gets custom_data23
     *
     * @return string|null
     */
    public function getCustomData23()
    {
        return $this->container['custom_data23'];
    }

    /**
     * Sets custom_data23
     *
     * @param string|null $custom_data23 カスタム項目23   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData23($custom_data23)
    {
        if (is_null($custom_data23)) {
            throw new \InvalidArgumentException('non-nullable custom_data23 cannot be null');
        }
        if ((mb_strlen($custom_data23) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data23 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data23'] = $custom_data23;

        return $this;
    }

    /**
     * Gets custom_data24
     *
     * @return string|null
     */
    public function getCustomData24()
    {
        return $this->container['custom_data24'];
    }

    /**
     * Sets custom_data24
     *
     * @param string|null $custom_data24 カスタム項目24   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData24($custom_data24)
    {
        if (is_null($custom_data24)) {
            throw new \InvalidArgumentException('non-nullable custom_data24 cannot be null');
        }
        if ((mb_strlen($custom_data24) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data24 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data24'] = $custom_data24;

        return $this;
    }

    /**
     * Gets custom_data25
     *
     * @return string|null
     */
    public function getCustomData25()
    {
        return $this->container['custom_data25'];
    }

    /**
     * Sets custom_data25
     *
     * @param string|null $custom_data25 カスタム項目25   設定できる最大長はUTF-8で30byteです。
     *
     * @return self
     */
    public function setCustomData25($custom_data25)
    {
        if (is_null($custom_data25)) {
            throw new \InvalidArgumentException('non-nullable custom_data25 cannot be null');
        }
        if ((mb_strlen($custom_data25) > 30)) {
            throw new \InvalidArgumentException('invalid length for $custom_data25 when calling FraudDetectionCustomData., must be smaller than or equal to 30.');
        }

        $this->container['custom_data25'] = $custom_data25;

        return $this;
    }

    /**
     * Gets custom_data26
     *
     * @return string|null
     */
    public function getCustomData26()
    {
        return $this->container['custom_data26'];
    }

    /**
     * Sets custom_data26
     *
     * @param string|null $custom_data26 カスタム項目26   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData26($custom_data26)
    {
        if (is_null($custom_data26)) {
            throw new \InvalidArgumentException('non-nullable custom_data26 cannot be null');
        }
        if ((mb_strlen($custom_data26) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data26 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data26'] = $custom_data26;

        return $this;
    }

    /**
     * Gets custom_data27
     *
     * @return string|null
     */
    public function getCustomData27()
    {
        return $this->container['custom_data27'];
    }

    /**
     * Sets custom_data27
     *
     * @param string|null $custom_data27 カスタム項目27   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData27($custom_data27)
    {
        if (is_null($custom_data27)) {
            throw new \InvalidArgumentException('non-nullable custom_data27 cannot be null');
        }
        if ((mb_strlen($custom_data27) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data27 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data27'] = $custom_data27;

        return $this;
    }

    /**
     * Gets custom_data28
     *
     * @return string|null
     */
    public function getCustomData28()
    {
        return $this->container['custom_data28'];
    }

    /**
     * Sets custom_data28
     *
     * @param string|null $custom_data28 カスタム項目28   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData28($custom_data28)
    {
        if (is_null($custom_data28)) {
            throw new \InvalidArgumentException('non-nullable custom_data28 cannot be null');
        }
        if ((mb_strlen($custom_data28) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data28 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data28'] = $custom_data28;

        return $this;
    }

    /**
     * Gets custom_data29
     *
     * @return string|null
     */
    public function getCustomData29()
    {
        return $this->container['custom_data29'];
    }

    /**
     * Sets custom_data29
     *
     * @param string|null $custom_data29 カスタム項目29   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData29($custom_data29)
    {
        if (is_null($custom_data29)) {
            throw new \InvalidArgumentException('non-nullable custom_data29 cannot be null');
        }
        if ((mb_strlen($custom_data29) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data29 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data29'] = $custom_data29;

        return $this;
    }

    /**
     * Gets custom_data30
     *
     * @return string|null
     */
    public function getCustomData30()
    {
        return $this->container['custom_data30'];
    }

    /**
     * Sets custom_data30
     *
     * @param string|null $custom_data30 カスタム項目30   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData30($custom_data30)
    {
        if (is_null($custom_data30)) {
            throw new \InvalidArgumentException('non-nullable custom_data30 cannot be null');
        }
        if ((mb_strlen($custom_data30) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data30 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data30'] = $custom_data30;

        return $this;
    }

    /**
     * Gets custom_data31
     *
     * @return string|null
     */
    public function getCustomData31()
    {
        return $this->container['custom_data31'];
    }

    /**
     * Sets custom_data31
     *
     * @param string|null $custom_data31 カスタム項目31   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData31($custom_data31)
    {
        if (is_null($custom_data31)) {
            throw new \InvalidArgumentException('non-nullable custom_data31 cannot be null');
        }
        if ((mb_strlen($custom_data31) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data31 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data31'] = $custom_data31;

        return $this;
    }

    /**
     * Gets custom_data32
     *
     * @return string|null
     */
    public function getCustomData32()
    {
        return $this->container['custom_data32'];
    }

    /**
     * Sets custom_data32
     *
     * @param string|null $custom_data32 カスタム項目32   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData32($custom_data32)
    {
        if (is_null($custom_data32)) {
            throw new \InvalidArgumentException('non-nullable custom_data32 cannot be null');
        }
        if ((mb_strlen($custom_data32) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data32 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data32'] = $custom_data32;

        return $this;
    }

    /**
     * Gets custom_data33
     *
     * @return string|null
     */
    public function getCustomData33()
    {
        return $this->container['custom_data33'];
    }

    /**
     * Sets custom_data33
     *
     * @param string|null $custom_data33 カスタム項目33   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData33($custom_data33)
    {
        if (is_null($custom_data33)) {
            throw new \InvalidArgumentException('non-nullable custom_data33 cannot be null');
        }
        if ((mb_strlen($custom_data33) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data33 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data33'] = $custom_data33;

        return $this;
    }

    /**
     * Gets custom_data34
     *
     * @return string|null
     */
    public function getCustomData34()
    {
        return $this->container['custom_data34'];
    }

    /**
     * Sets custom_data34
     *
     * @param string|null $custom_data34 カスタム項目34   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData34($custom_data34)
    {
        if (is_null($custom_data34)) {
            throw new \InvalidArgumentException('non-nullable custom_data34 cannot be null');
        }
        if ((mb_strlen($custom_data34) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data34 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data34'] = $custom_data34;

        return $this;
    }

    /**
     * Gets custom_data35
     *
     * @return string|null
     */
    public function getCustomData35()
    {
        return $this->container['custom_data35'];
    }

    /**
     * Sets custom_data35
     *
     * @param string|null $custom_data35 カスタム項目35   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData35($custom_data35)
    {
        if (is_null($custom_data35)) {
            throw new \InvalidArgumentException('non-nullable custom_data35 cannot be null');
        }
        if ((mb_strlen($custom_data35) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data35 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data35'] = $custom_data35;

        return $this;
    }

    /**
     * Gets custom_data36
     *
     * @return string|null
     */
    public function getCustomData36()
    {
        return $this->container['custom_data36'];
    }

    /**
     * Sets custom_data36
     *
     * @param string|null $custom_data36 カスタム項目36   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData36($custom_data36)
    {
        if (is_null($custom_data36)) {
            throw new \InvalidArgumentException('non-nullable custom_data36 cannot be null');
        }
        if ((mb_strlen($custom_data36) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data36 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data36'] = $custom_data36;

        return $this;
    }

    /**
     * Gets custom_data37
     *
     * @return string|null
     */
    public function getCustomData37()
    {
        return $this->container['custom_data37'];
    }

    /**
     * Sets custom_data37
     *
     * @param string|null $custom_data37 カスタム項目37   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData37($custom_data37)
    {
        if (is_null($custom_data37)) {
            throw new \InvalidArgumentException('non-nullable custom_data37 cannot be null');
        }
        if ((mb_strlen($custom_data37) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data37 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data37'] = $custom_data37;

        return $this;
    }

    /**
     * Gets custom_data38
     *
     * @return string|null
     */
    public function getCustomData38()
    {
        return $this->container['custom_data38'];
    }

    /**
     * Sets custom_data38
     *
     * @param string|null $custom_data38 カスタム項目38   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData38($custom_data38)
    {
        if (is_null($custom_data38)) {
            throw new \InvalidArgumentException('non-nullable custom_data38 cannot be null');
        }
        if ((mb_strlen($custom_data38) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data38 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data38'] = $custom_data38;

        return $this;
    }

    /**
     * Gets custom_data39
     *
     * @return string|null
     */
    public function getCustomData39()
    {
        return $this->container['custom_data39'];
    }

    /**
     * Sets custom_data39
     *
     * @param string|null $custom_data39 カスタム項目39   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData39($custom_data39)
    {
        if (is_null($custom_data39)) {
            throw new \InvalidArgumentException('non-nullable custom_data39 cannot be null');
        }
        if ((mb_strlen($custom_data39) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data39 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data39'] = $custom_data39;

        return $this;
    }

    /**
     * Gets custom_data40
     *
     * @return string|null
     */
    public function getCustomData40()
    {
        return $this->container['custom_data40'];
    }

    /**
     * Sets custom_data40
     *
     * @param string|null $custom_data40 カスタム項目40   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData40($custom_data40)
    {
        if (is_null($custom_data40)) {
            throw new \InvalidArgumentException('non-nullable custom_data40 cannot be null');
        }
        if ((mb_strlen($custom_data40) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data40 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data40'] = $custom_data40;

        return $this;
    }

    /**
     * Gets custom_data41
     *
     * @return string|null
     */
    public function getCustomData41()
    {
        return $this->container['custom_data41'];
    }

    /**
     * Sets custom_data41
     *
     * @param string|null $custom_data41 カスタム項目41   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData41($custom_data41)
    {
        if (is_null($custom_data41)) {
            throw new \InvalidArgumentException('non-nullable custom_data41 cannot be null');
        }
        if ((mb_strlen($custom_data41) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data41 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data41'] = $custom_data41;

        return $this;
    }

    /**
     * Gets custom_data42
     *
     * @return string|null
     */
    public function getCustomData42()
    {
        return $this->container['custom_data42'];
    }

    /**
     * Sets custom_data42
     *
     * @param string|null $custom_data42 カスタム項目42   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData42($custom_data42)
    {
        if (is_null($custom_data42)) {
            throw new \InvalidArgumentException('non-nullable custom_data42 cannot be null');
        }
        if ((mb_strlen($custom_data42) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data42 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data42'] = $custom_data42;

        return $this;
    }

    /**
     * Gets custom_data43
     *
     * @return string|null
     */
    public function getCustomData43()
    {
        return $this->container['custom_data43'];
    }

    /**
     * Sets custom_data43
     *
     * @param string|null $custom_data43 カスタム項目43   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData43($custom_data43)
    {
        if (is_null($custom_data43)) {
            throw new \InvalidArgumentException('non-nullable custom_data43 cannot be null');
        }
        if ((mb_strlen($custom_data43) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data43 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data43'] = $custom_data43;

        return $this;
    }

    /**
     * Gets custom_data44
     *
     * @return string|null
     */
    public function getCustomData44()
    {
        return $this->container['custom_data44'];
    }

    /**
     * Sets custom_data44
     *
     * @param string|null $custom_data44 カスタム項目44   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData44($custom_data44)
    {
        if (is_null($custom_data44)) {
            throw new \InvalidArgumentException('non-nullable custom_data44 cannot be null');
        }
        if ((mb_strlen($custom_data44) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data44 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data44'] = $custom_data44;

        return $this;
    }

    /**
     * Gets custom_data45
     *
     * @return string|null
     */
    public function getCustomData45()
    {
        return $this->container['custom_data45'];
    }

    /**
     * Sets custom_data45
     *
     * @param string|null $custom_data45 カスタム項目45   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData45($custom_data45)
    {
        if (is_null($custom_data45)) {
            throw new \InvalidArgumentException('non-nullable custom_data45 cannot be null');
        }
        if ((mb_strlen($custom_data45) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data45 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data45'] = $custom_data45;

        return $this;
    }

    /**
     * Gets custom_data46
     *
     * @return string|null
     */
    public function getCustomData46()
    {
        return $this->container['custom_data46'];
    }

    /**
     * Sets custom_data46
     *
     * @param string|null $custom_data46 カスタム項目46   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData46($custom_data46)
    {
        if (is_null($custom_data46)) {
            throw new \InvalidArgumentException('non-nullable custom_data46 cannot be null');
        }
        if ((mb_strlen($custom_data46) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data46 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data46'] = $custom_data46;

        return $this;
    }

    /**
     * Gets custom_data47
     *
     * @return string|null
     */
    public function getCustomData47()
    {
        return $this->container['custom_data47'];
    }

    /**
     * Sets custom_data47
     *
     * @param string|null $custom_data47 カスタム項目47   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData47($custom_data47)
    {
        if (is_null($custom_data47)) {
            throw new \InvalidArgumentException('non-nullable custom_data47 cannot be null');
        }
        if ((mb_strlen($custom_data47) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data47 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data47'] = $custom_data47;

        return $this;
    }

    /**
     * Gets custom_data48
     *
     * @return string|null
     */
    public function getCustomData48()
    {
        return $this->container['custom_data48'];
    }

    /**
     * Sets custom_data48
     *
     * @param string|null $custom_data48 カスタム項目48   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData48($custom_data48)
    {
        if (is_null($custom_data48)) {
            throw new \InvalidArgumentException('non-nullable custom_data48 cannot be null');
        }
        if ((mb_strlen($custom_data48) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data48 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data48'] = $custom_data48;

        return $this;
    }

    /**
     * Gets custom_data49
     *
     * @return string|null
     */
    public function getCustomData49()
    {
        return $this->container['custom_data49'];
    }

    /**
     * Sets custom_data49
     *
     * @param string|null $custom_data49 カスタム項目49   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData49($custom_data49)
    {
        if (is_null($custom_data49)) {
            throw new \InvalidArgumentException('non-nullable custom_data49 cannot be null');
        }
        if ((mb_strlen($custom_data49) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data49 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data49'] = $custom_data49;

        return $this;
    }

    /**
     * Gets custom_data50
     *
     * @return string|null
     */
    public function getCustomData50()
    {
        return $this->container['custom_data50'];
    }

    /**
     * Sets custom_data50
     *
     * @param string|null $custom_data50 カスタム項目50   設定できる最大長はUTF-8で255byteです。
     *
     * @return self
     */
    public function setCustomData50($custom_data50)
    {
        if (is_null($custom_data50)) {
            throw new \InvalidArgumentException('non-nullable custom_data50 cannot be null');
        }
        if ((mb_strlen($custom_data50) > 255)) {
            throw new \InvalidArgumentException('invalid length for $custom_data50 when calling FraudDetectionCustomData., must be smaller than or equal to 255.');
        }

        $this->container['custom_data50'] = $custom_data50;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


