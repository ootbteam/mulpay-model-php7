<?php
/**
 * RedirectInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PGマルチペイメントサービス OpenAPIタイプ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OotbTeam\MulPay\Model;

use \ArrayAccess;
use \OotbTeam\MulPay\ObjectSerializer;

/**
 * RedirectInformation Class Doc Comment
 *
 * @category Class
 * @description リダイレクト情報
 * @package  OotbTeam\MulPay
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RedirectInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RedirectInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirect_url' => 'string',
        'http_method' => 'string',
        'redirect_type' => 'string',
        'redirect_parameters' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirect_url' => null,
        'http_method' => null,
        'redirect_type' => null,
        'redirect_parameters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirect_url' => false,
        'http_method' => false,
        'redirect_type' => false,
        'redirect_parameters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_url' => 'redirectUrl',
        'http_method' => 'httpMethod',
        'redirect_type' => 'redirectType',
        'redirect_parameters' => 'redirectParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_url' => 'setRedirectUrl',
        'http_method' => 'setHttpMethod',
        'redirect_type' => 'setRedirectType',
        'redirect_parameters' => 'setRedirectParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_url' => 'getRedirectUrl',
        'http_method' => 'getHttpMethod',
        'redirect_type' => 'getRedirectType',
        'redirect_parameters' => 'getRedirectParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HTTP_METHOD_GET = 'GET';
    public const HTTP_METHOD_POST = 'POST';
    public const REDIRECT_TYPE_TDS2 = 'TDS2';
    public const REDIRECT_TYPE_WALLET_CHARGE = 'WALLET_CHARGE';
    public const REDIRECT_TYPE_WALLET_AUTHORIZE = 'WALLET_AUTHORIZE';
    public const REDIRECT_TYPE_VERIFY = 'VERIFY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHttpMethodAllowableValues()
    {
        return [
            self::HTTP_METHOD_GET,
            self::HTTP_METHOD_POST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRedirectTypeAllowableValues()
    {
        return [
            self::REDIRECT_TYPE_TDS2,
            self::REDIRECT_TYPE_WALLET_CHARGE,
            self::REDIRECT_TYPE_WALLET_AUTHORIZE,
            self::REDIRECT_TYPE_VERIFY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('http_method', $data ?? [], null);
        $this->setIfExists('redirect_type', $data ?? [], null);
        $this->setIfExists('redirect_parameters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['redirect_url']) && (mb_strlen($this->container['redirect_url']) > 512)) {
            $invalidProperties[] = "invalid value for 'redirect_url', the character length must be smaller than or equal to 512.";
        }

        $allowedValues = $this->getHttpMethodAllowableValues();
        if (!is_null($this->container['http_method']) && !in_array($this->container['http_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'http_method', must be one of '%s'",
                $this->container['http_method'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!is_null($this->container['redirect_type']) && !in_array($this->container['redirect_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'redirect_type', must be one of '%s'",
                $this->container['redirect_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url リダイレクト先のURL
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            throw new \InvalidArgumentException('non-nullable redirect_url cannot be null');
        }
        if ((mb_strlen($redirect_url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $redirect_url when calling RedirectInformation., must be smaller than or equal to 512.');
        }

        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets http_method
     *
     * @return string|null
     */
    public function getHttpMethod()
    {
        return $this->container['http_method'];
    }

    /**
     * Sets http_method
     *
     * @param string|null $http_method リダイレクト時のHTTPメソッド   原則 `GET` です。詳細は[リダイレクトとコールバック](#tag/callback)を参照ください。
     *
     * @return self
     */
    public function setHttpMethod($http_method)
    {
        if (is_null($http_method)) {
            throw new \InvalidArgumentException('non-nullable http_method cannot be null');
        }
        $allowedValues = $this->getHttpMethodAllowableValues();
        if (!in_array($http_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'http_method', must be one of '%s'",
                    $http_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['http_method'] = $http_method;

        return $this;
    }

    /**
     * Gets redirect_type
     *
     * @return string|null
     */
    public function getRedirectType()
    {
        return $this->container['redirect_type'];
    }

    /**
     * Sets redirect_type
     *
     * @param string|null $redirect_type リダイレクト処理のタイプ   - `TDS2`：3Dセキュア - `WALLET_CHARGE`：Pay払い 都度支払い - `WALLET_AUTHORIZE`：Pay払い 利用承諾 - `VERIFY`：本人確認
     *
     * @return self
     */
    public function setRedirectType($redirect_type)
    {
        if (is_null($redirect_type)) {
            throw new \InvalidArgumentException('non-nullable redirect_type cannot be null');
        }
        $allowedValues = $this->getRedirectTypeAllowableValues();
        if (!in_array($redirect_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'redirect_type', must be one of '%s'",
                    $redirect_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['redirect_type'] = $redirect_type;

        return $this;
    }

    /**
     * Gets redirect_parameters
     *
     * @return array<string,mixed>|null
     */
    public function getRedirectParameters()
    {
        return $this->container['redirect_parameters'];
    }

    /**
     * Sets redirect_parameters
     *
     * @param array<string,mixed>|null $redirect_parameters リダイレクト時のパラメーター   リダイレクト時のHTTPメソッドが `POST` の場合に、リクエストボディに設定するパラメーター(Map形式)です。   `GET` の場合は、クエリパラメーターとしてリダイレクト先URLに含まれるため、この項目は返しません。
     *
     * @return self
     */
    public function setRedirectParameters($redirect_parameters)
    {
        if (is_null($redirect_parameters)) {
            throw new \InvalidArgumentException('non-nullable redirect_parameters cannot be null');
        }
        $this->container['redirect_parameters'] = $redirect_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


